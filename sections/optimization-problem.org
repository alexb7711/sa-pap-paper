* Optimization Problem
:PROPERTIES:
:CUSTOM_ID: sec:sa-optimization-problem
:END:

The objective of this work is to present a framework that optimizes the assignment of $n_V$ BEB visits to a set of $n_Q$
charging queues during the interval $[0,\T]$ provided a fleet of $n_A$ BEBs with fixed route schedules. Particularly,
the framework aims to minimize over peak power usage, energy consumption, and the total amount of chargers utilized
while maintaining the SOC of each BEB above a minimum SOC threshold.

The optimization problem outlined in this work is presented in form of an objective function with constraints. The
constraints ensure that candidate solutions are operationally feasible. The variables of optimization are to be
introduced in [[#sec:sa-parameter-definitions]] followed by a discussion of the constraints in [[#sec:sa-constraints]]. The
objective function is employed to allow relative comparisons between candidate solutions and is introduced in
[[#sec:sa-objective-function]].

** Variable Definitions
:PROPERTIES:
:CUSTOM_ID: sec:sa-parameter-definitions
:END:

This section defines the input and decision variables used in this work. The input parameters are assumed to be fixed
prior to optimizing the system. The decision variables are the values that the SA algorithm has the freedom to
manipulate. The variables to be introduced are summarized in [[tab:sa-variables]].

*** Input Parameters
:PROPERTIES:
:CUSTOM_ID: sec:sa-input-variables
:END:

Parameters are used to indicate value that are assumed to be known prior to optimization. They will be presented in two
sections: packing and discretization parameters then battery dynamic parameters. The packing and discretization
parameters are those that are associated with visit placement and the method of discretizing the time horizon and the
battery dynamic parameters are those associated with the SOC of the BEB.

**** Packing and Discretization Parameters
:PROPERTIES:
:CUSTOM_ID: sec:sa-packing-and-discretization-paramaters
:END:

Let $\xi_i$ represent the next arrival index for bus $b_i$. For example, suppose the ID of each BEB is recorded in order
of arrival as $\{ 2,1,3,2 \}$. Using a starting index of 1, $\xi_1 = 4$ as that is the next visit by bus 2. Each visit is
prescribed arrival and departure times, $a_i$ and $e_i$, respectively. An associated cost is employed when a visit is
assigned to a charging queue. Let the assignment cost be represented by $\epsilon_q$. Lastly, the time horizon is to be
discretized to assist in computing the peak demand cost, let $t_h$ denote a discrete time step, and let $dt$ denote the
discrete time step $dt = t_h - t_{h-1}$.

**** Battery Dynamic Parameters
:PROPERTIES:
:CUSTOM_ID: sec:sa-battery-dynamic-parameters
:END:

It is assumed that each bus $b$ begins the working day with an initial SOC percentage of $\alpha_b$. Let the set of initial
visits by each BEB be denoted as $\Isetinit$ where $\Isetinit \subset \Iset$ and the cardinality of the set is $\lvert
\Isetinit \rvert = n_B$. The initial SOC for bus $b_i$ can be represented as $\eta_{i} = \alpha_{b_i}\kappa_{b_i}; \forall i \in \Isetinit$
where $\kappa_{b_i}$ is the battery capacity for bus $b_i$. Each visit, with the exception of the final visit for each BEB,
is paired with a route that has an associated amount energy required to complete, $\Delta_i$. As alluded to earlier, there
are no routes after the last visit for each BEB. Thus, similarly to the set of initial visits, let the set of final
visits for all BEBs be denoted as $\Isetfinal$. The discharge for the final visit of each BEB is then defined as $\Delta_{i}
= 0; \forall i \in \Isetfinal$. After each arrival, the BEB is assigned to a charging queue. Let $r_q$ represent the power
supplied from the charger in queue $q \in Q$.

*** Decision Variables
:PROPERTIES:
:CUSTOM_ID: sec:sa-decision-variables
:END:
Decision variables are those chosen by the optimizer. The variables will be broken into two sections: direct and slack
variables. Direct decision variables are those that the system manipulates directly, and slack variables are those that
are functions of the direct.

**** Direct Decision Variables
:PROPERTIES:
:CUSTOM_ID: sec:sa-direct-decision-variables
:END:

Each bus is assigned an initial and final charging time, denoted as $u_i$ and $d_i$, respectfully. These values must
remain within range of the arrival and departure times, $[a_i, e_i]$, for visit $i$. Along with the assigned charge
times, the bus is also assigned a charging queue, $q_i \in \Qset$.

**** Slack Variables
:PROPERTIES:
:CUSTOM_ID: sec:sa-slack-decision-variables
:END:

Recall the initial SOC for a visit is written as $\eta_i$, where $i \in \Iset \setminus \Iset_0$. Further recall the set of initial
visits, $\Iset_0$, have an assumed known SOC (i.e., the initial SOC of each BEB at the beginning of the working day is
considered as an input parameter). The exclusion $i \in \Iset \setminus \Iset_0$ extracts the set of indices for which the initial
SOC of the visit are unknown. The initial SOC for each visit in $i \in \Iset \setminus \Iset_0$ forms the foundation for the SOC
of the next visit, $\eta_{\xi_i}$. The charge for bus $i$'s next visit is equal to the initial charge for visit $i$ plus the
charge added to it by charger $q_i$ over duration $s_i = d_i - u_i$ minus the discharge accumulated over route $i$,

#+name: eq:bat-chain
\begin{equation}
  \eta_{\xi_i} = \eta_i + r_{q_i}s_i - \Delta_i\text{.}
\end{equation}

#+begin_src latex
  \begin{figure}
      \centering
      \includegraphics{img/overlap}
      \caption{Examples of different methods of overlapping. Space overlap: $q_{k_1} > q_{i} + 1 \therefore \psi_{ik_{1}} = 1$.
        Time overlap $u_{k_2} < u_{j} + s_j \therefore \sigma_{k_{2}j} = 0$. Similarly, $\sigma_{k_3 i} = 0$.}
      \label{fig:overlap}
    \end{figure}
#+end_src

The variables $\sigma_{ij}$ and $\psi_{ij}$ are used to indicate whether a visit pair $(i, j)$ overlap the same space, as show
in \ref{fig:overlap}. These spatiotemporal variables uphold the following relationships: for every
visit, $\sigma_{ij} = 1 \implies$ the start charge time of visit $j$ is greater than the end charge time of visit $i$.
Similarly, $\psi_{ij} = 1 \implies$ the queue for visit $j$ is of a greater index than visit $i$. A value of zero for
either of these variables conveys no information.

The variable $\C$ is the set that describes the availability for all chargers. That is, $\C$ is a set of $n_Q$ sets that
contain available charger times for each queue $q \in Q$. Let a set of available charge times for queue $q$ be defined as
$\C_q$.

#+begin_comment
$q \in \Qset$. In other words, $\C$ defines
the set of times when the chargers are not being utilized or are "inactive". To derive $\C$, consider its complement,
$\C'$, which is the set of "active" time periods for each charger. Let $\C_q' \subset \C'$ describes the active times for
charger $q$. Focusing on an individual charger, consider $\C_q'$ before a schedule has been imposed upon it, $\C_q' = \{
\varnothing \}$. In other words, no buses have been assigned to be charged over some time period $[u_i, d_i]$. After the
scheduling process is complete, $\C_q'$ will have a set of active periods of the form $\C_q' = \{[u_i, d_i]: i \in I\}$.

With a fully defined set $\C_q'$, its compliment can be found, $\C_q$. Let the $j^{\text{th}}$ inactive period be for
charger $q$ be denoted as $\C_{j.q}$. To determine the inverse of $\C_q'$, begin by noting that $\C_q'$ is said to be
disjoint, $\C_q' \bigcap \{[u_j, d_j] : j \in \Jsetq\} = \varnothing$ (i.e. the sets share no common elements)
[cite:@halmos-1974-naive-set-theor]. The inverse of a disjoint set can be found by the De Morgan Law: $(A \cap B)' = A' \cup
B'$. Using De Morgan's Law, the set of inactive periods can be written as $\C_q \equiv \bigcup \{[u_j, d_j]': j \in \Jsetq\}$.
Because of this disjoint property, it is simple to iteratively construct $\C$. As an example, consider charger $q$ at
the beginning of the working day. The charger has no assignments, thus $\C_q = \{[0, \T]\}$. Furthermore, suppose a BEB
was to assigned to charger $q$ for the duration $[u_i, d_i]$ such that $0 < u_i < d_i, < \T$, $\C_q$ would then be
written as $\C_q = \{[0, u_i], [d_i, \T]\}$. Further assignments can then be made within either time frame $[0, u_i]$ or
$[d_i, \T]$.
#+end_comment

** Objective Function
:PROPERTIES:
:CUSTOM_ID: sec:sa-objective-function
:END:

This work aims to minimize the total "cost" of utilizing a given charge schedule. Let $J(\I)$ represent the objective
function. The objective function for this problem has four main considerations: charger assignment, consumption cost,
demand cost, and a penalty method for visits with insufficient SOCs. Each of which will be discussed in turn throughout
the subsequent sections.

*** Assignment Cost
:PROPERTIES:
:CUSTOM_ID: sec:sa-assignment-cost
:END:

The assignment cost represents the costs of assigning a bus to a particular queue. The assignment cost is written as

#+name: eq:assignment-cost
\begin{equation}
\sum_{i=1}^{n_V} \epsilon_{q_i}r_{q_i}\text{.}
\end{equation}

This is effectively the cost of selecting queue $q_i$. While any set of weight may be selected, in [[#sec:sa-example]], a
particular choice for the assignment cost, $\epsilon_{q_i}$, is made to encourage the use of slow chargers over fast for the
sake of battery health. The charger queue indices are ordered such that the first $n_B$ queues correspond to idle
queues. This allows all BEBs to simultaneously sit idle if needed. All $n_B$ idle queues have assignment costs of zero
to denote that there is no cost when not charging. The next group of chargers is assumed to be the slow chargers
subsequently followed by the fast. Let the set of slow and fast charging queues be of the form $[P, 2P, ..., n_QP]$.
Concatenating these vectors yields $\epsilon = [[0; n_B], [P, 2P, 3P, ...]$, where $\epsilon$ describes the vector of assignment costs
and $[0; n_B]$ is used to denote a vector populated with zeros of length $n_B$.

*** Penalty Method
:PROPERTIES:
:CUSTOM_ID: sec:sa-penalty-method
:END:

A penalty method is to be implemented to provide a soft constraint on the lower bound of the charge. Due to the
uncertainty of the initial SOC for each visit, a soft constraint is employed to increase the solution space while
penalizing non-operationally feasible solutions. If a hard constraint were to be implemented, the constraint would
restrict the set of allowable schedules to only operationally feasible schedules. Let the piecewise function that
enables/disables the penalty method be of the form

#+include: eq/penalty.org

Letting $x = \eta_i - \nu_{b_i} \kappa_{b_i}$ applies a penalty proportional to the difference of the SOC and the threshold
squared, where $\eta_i$ is the initial SOC for visit $i$ and $\nu_{b_i} \kappa_{b_i}$ is the minimum charge threshold. Using the
form of [[eq:penalty]] with and added scalar, $z_p$, is employed so that the cost of deviating from the threshold influences
the outcome of the objective function. Particularly, this method is employed as a means of encouraging that the schedule
has enough charge for each BEB to complete its next route. Therefore, the penalty method is written as

#+name: eq:penalty-method
\begin{equation}
\sum_{i=1}^{n_V} z_p \phi_i(\eta_i - \nu_{b_i} \kappa_{b_i})\text{.}
\end{equation}

*** Consumption Cost
:PROPERTIES:
:CUSTOM_ID: sec:sa-consumpction-cost
:END:

In most cases, utility companies have a portion of the cost related to the total electricity consumed over a billing
period, referred to herein as the consumption cost. The consumption cost is the summation of all the energy being used
over all the active periods for each charger in the time horizon. This is represented by the summation

#+name: eq:consumption-cost
\begin{equation}
z_c \sum_{i=1}^{n_V} r_{q_i}s_i\text{.}
\end{equation}

A scaling $z_c$ is used as a weight for the consumption cost (this could correspond to a monetary cost imposed by the
utility). Within the summation, the charge rate, $r_{q_i}$, for the active charger, $q_i$, is multiplied by the time
that the charger will be utilized, $s_i$.

*** Demand Cost
:PROPERTIES:
:CUSTOM_ID: sec:sa-demand-cost
:END:

Utility companies often charge a "demand cost" in an effort to reduce peak power use. A particular example of peak
demand is the fifteen minute average energy usage employed by Rocky Mountain Power Schedule 8
[cite:@rocky-mountain-power].

A method of calculating the demand charge is done by calculating the average power consumption over a given period of
time. Let the average power used over an arbitrary interval, $T_p$, be represented by

#+name: eq:p
\begin{equation}
p_{T_p}(t) = \frac{1}{T_p} \int_{t-T_p}^{t} p(\tau) d\tau\text{.}
\end{equation}

The largest average power usage over $T_p$ is used as the demand cost for the billing period. Therefore, let the cost of
the peak power consumption be dictated by the maximum average power:

#+name: eq:pmax
\begin{equation}
p_{max}(t) = \max\limits_{\tau \in [0,t]}p_{T_p}(\tau)\text{.}
\end{equation}

Furthermore, a fixed minimum average power is introduced that is intended to act as a base threshold before the cost
begins to increase. Let this fixed threshold be defined as $p_{fix}$, the demand cost is calculated using

#+name: eq:pdem
\begin{equation}
p_d(t) = \max(p_{fix},p_{max}(t))\text{.}
\end{equation}

Thus, \ref{eq:pdem} defines the continuous form of maximum average demand cost found during a pay period. Although the
charge times for each BEB are continuous, due to the discrete nature of visits, it difficult to determine the
instantaneous power usage in continuous terms. As such, it is simpler to calculate a vector of discrete power use over
the time horizon from which the average power demand may be approximated. To discritize $p_d$, let $h \in \{ 1, 2, ...,
n_H \} \subset \mathcal{Z}$ where $n_H$ is the total number of steps. Furthermore, let $p$ define the vector of discrete power demand
over the time horizon and let $p_h \in p$ be the demand over time step $h$. For conciseness of notation $t_h$ will be
abused to denote the time in discrete form (as opposed to $t$ being continuous) and let $dt = t_h - t_{h-1}$. Each entry
$p_h \in p$ is found by taking the summation of $r_{v_i}$ for all the chargers active during the time interval $[t_h,
t_h + dt]$. Thus, having an estimate of the demand over each step, the average demand can be calculated by taking an
average of the Riemann sum over each $T_p$ interval as follows:

#+begin_comment
Thus, for a given visit $i$, the corresponding discrete indices of $h \in \Hset$ for the range $[u_i, d_i]$ can be
determined by first calculating the total number of steps, $n_h = \frac{d_i - u_i}{dt}$. Once the number of steps is
known, the consumed power, $r_{vi}$ can be added to the correct indices in $p$.

To derive $p$, a vector of discrete power consumption over the time horizon, utilizing scheduled visits is outlined in
\ref{alg:calc-p}. In other words, the objective of \ref{alg:calc-p} to calculate a vector, $p$, that defines the power
consumed over discrete steps throughout time horizon. Line 2 defines the time over which the average power will be
calculated. Line 3 initializes a vector, $p$, with $n_H$ elements populated with zeros. The vector $p$ is used to store
the power consumption for each discrete step over the time horizon $\T$. Line 5 calculates the number of elements in the
charge time $s_i$. Line 6 calculates the index of $p$ for all $n_h$ steps and iterates through each index. Line 7 adds
the power consumed by charging $q_i$ for the $h^{\text{th}}$ step.

,#+include: "eq/calc-p.org"
#+end_comment

\begin{equation}
p_{T_p}[h] = \frac{1}{T_p} \sum_{h-\frac{T_p}{dt}+1}^h p_h,
\end{equation}

where $T_p \le h \le n_H$. Similarly to before, the maximum $p_{T_p}[h]$ value is to be retained via $p_{max} =
\max\limits_{h \in H}p_{T_p}[h]$. Thus, the discrete demand cost is expressed as

#+name: eq:pd-dis
\begin{equation}
  p_d = \max(p_{fix}, p_{max})\text{.}
\end{equation}

Similarly to the consumption cost, a scaling $z_d$ is applied. Again, this may be a monetary conversion or simply just a
gain. Thus, the objective function written in its entirety is

#+name: eq:objective-function
\begin{equation}
  J(\I) = z_d p_d + \sum_{i=1}^{n_V} \Big[ \epsilon_{q_i}r_{q_i} + z_p \phi_i(\eta_i - \nu_{b_i} \kappa_{b_i}) + z_c r_{q_i} s_i \Big] \text{.}
\end{equation}

** Constraints
:PROPERTIES:
:CUSTOM_ID: sec:sa-constraints
:END:

While the objectives are used to compare solutions, constraints are introduced to ensure that the solutions are
operationally valid. Operationally validity requires that allocated BEBs do not overlap spatially or temporally.
Furthermore, the SOC of a bus at a particular visit is related to the charge from its previous visit by the amount of
charging and discharging that has occurred. Finally, buses must leave the charger before their scheduled departure time.
These constraints are represented as follows:

#+include: "eq/constraints.org"

# Org mode is a little silly and does not take normal referencing syntax. This note is for future reference.

#+begin_src latex
      \begin{figure}
      \centering
      \scalebox{0.5}{
        \centering
          \begin{tikzpicture}
            % Variables
            \def \arrx   {2.0}
            \def \initx  {3.5}
            \def \endx   {8.5}
            \def \depx   {10.0}
            \def \yshift {5}

            % Axis
            \draw [thick,<->] (0,15) node[above]{Queues} -- (0,0) -- (15,0) node[right]{Time};

            % Rectangles
            \node[rectangle, draw, fill=gray, minimum width=4cm, minimum height = 3cm] at (3,12) {A};
            \node[rectangle, draw, fill=gray, minimum width=3cm, minimum height = 3cm] at (9,12) {B};
            \node[rectangle, draw, fill=gray, minimum width=5cm, minimum height = 3cm] at (6,7) {D};
            \node[rectangle, draw, fill=gray, minimum width=6cm, minimum height = 3cm] at (12,2) {C};

            % X-axis labels
            \node [below,align=center] at (\arrx,0) {\scriptsize Arrival     \\ \scriptsize Time \\ $a_D$};
            \node [below, align=center] at (\initx,0) {\scriptsize Charge    \\ \scriptsize Initiation  \\ $u_D$};
            \node [below, align=center] at (\endx,0) {\scriptsize Charge     \\ \scriptsize End \\ $d_D$};
            \node [below, align=center] at (\depx,0) {\scriptsize Departure  \\ \scriptsize Time \\ $e_D$};

            % Y-axis labels
            \node[rotate=90] at (-1, 2.25) {Queue 1};
            \node[rotate=90] at (-1, 7.25) {Queue 2};
            \node[rotate=90] at (-1, 12.25) {Queue 3};

            % Vertical lines
            \draw[dashed] (\arrx,\yshift)--(\arrx,0);
            \draw[dashed] (\initx,\yshift)--(\initx,0);
            \draw[dashed] (\endx,\yshift)--(\endx,0);
            \draw[dashed] (\depx,\yshift)--(\depx,0);

            % Horizontal lines
            \draw[dotted] (0, 4.5) -- (15, 4.5);
            \draw[dotted] (0, 9.5) -- (15, 9.5);

          \end{tikzpicture}
        }
        \caption{The representation of the queue-time space. The x and y-axis represent time and space, respectively. Along the y-axis, the dashed lines represent discrete queuing locations. The shaded rectangles represent schedules BEBs to be charged. The height of each shaded rectangle represents the space taken on the queue and the width being the time to service said BEB. The vertical dashed lines are associated with vessel D and represent the arrival time, initial charge time, charge completion time, and departure time. Note that the arrival time may be before the initial charge time and the completion time may before the departure time.}
        \label{fig:spacial-and-temporal-constr}
  \end{figure}
#+end_src

\ref{seq:c0}-\ref{seq:c4} are denoted as "queuing constraints". They prevent overlap both spatially and temporally as
shown in \ref{fig:spacial-and-temporal-constr}. The y-axis represents the possible queues for a bus visit to be placed into, and the x-axis
represents the time that can be reserved for each visit. The shaded rectangles represent time that has been scheduled in
the horizontal direction, and the queue allocated for each bus visit in the vertical direction. In other words, the set
of constraints \ref{seq:c0} - \ref{seq:c4} aim to ensure that these shaded rectangles never overlap.

Constraint \ref{seq:c0} states that the starting charge time for BEB $u_j$ must begin after the previous BEB departs,
$d_i$. A value of $\sigma_{ij} = 1 \implies$ bus $i$ has detached from the charger before bus $j$ has begun charging. If
$\sigma_{ij} = 0$, then the constraint is of the form $\T + d_i > u_j$ rendering the constraint "inactive". Similarly, for
\ref{seq:c1}, $\psi_{ij}$ determines spacial positioning of BEB $i$ and $j$ relative to one another. A value of $\psi_{ij} = 1
\implies$ BEB $i$ is in a queue index that is less than BEB $j$. If $\psi_{ij} = 0$ then the constraint is deactivated.
Constraints \ref{seq:c2} - \ref{seq:c4} enforce spatial and temporal ordering between each queue/vehicle pair.
\ref{seq:c2} and \ref{seq:c3} ensure that BEB $i$ is not placed before and after $j$ spatially or temporally as that is
not possible. \ref{seq:c4} enforces at least one of the spatial or temporal relationships between each visit is active.
This ensures there are no scheduling conflicts (i.e. either charging sessions are ordered temporally or are in different
queues).

\ref{seq:c5} describes the service time of the bus. \ref{seq:c6} calculates the initial charge for the next visit for
bus $b_i$. \ref{seq:c7} ensures that the bus is not being over-charged. \ref{seq:c8} ensures the continuity of the times
(i.e. the arrival time is less than the initial charge which is less than the detach time which is less than the time
the bus exits the station and all must be less than the time horizon).

#  LocalWords: BEB MILP BEBs Hadamard
