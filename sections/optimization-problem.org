* Optimization Problem
:PROPERTIES:
:CUSTOM_ID: sec:optimization-problem
:END:
The problem outlined in this work is presented in the form of an objective function with MILP constraints. The MILP
constraints ensure that candidate solutions are operationally feasible. The optimization variables are introduced in
[[#sec:parameter-definitions]]. The objective function is broken down into four major components: consumption cost, demand
cost, assignment cost, and under-charging cost (i.e. a penalty for not meeting minimum charge requirements). The
constraints will then be introduced in [[#sec:constraints]]. The objective function is introduced in
[[#sec:objective-function]].

** Variable Definitions
:PROPERTIES:
:CUSTOM_ID: sec:parameter-definitions
:END:
This section defines the input and decision variables used by the system. The input parameters are assumed to be fixed
prior to optimizing the system. The decision variables are the values that the SA algorithm has the freedom to
manipulate. The variables to be introduced are summarized in [[tab:variables]].

*** Input Parameters
:PROPERTIES:
:CUSTOM_ID: sec:input-variables
:END:

The parameters are assumed to be known prior to optimization. They will be presented in two sections: battery dynamics
parameters then packing and discretization parameters. The Battery dynamic parameters are those associated with the SOC
of the BEB, the packing and discretization parameters are those that are associated with BEB placement and the method of
discretizing the system.

**** Battery Dynamic Parameters
:PROPERTIES:
:CUSTOM_ID: sec:battery-dynamic-parameters
:END:

The amount energy required to complete the bus route after visit $i$ is denoted as $\Delta_i$. There are no routes after the
last visit for each BEB; thus; the energy consumed after the final visit is zero. Let the set of final visits for all
BEBs be denoted as $\Isetfinal$. That is, the cardinality of the set is $\lvert \Isetfinal \rvert = n_B$ where $i \in
\Isetfinal \subset \Iset$ specifies the index for the final visit of bus. The discharge for the final visit of each BEB is
then defined as $\Delta_{i} = 0; \forall i \in \Isetfinal$. The initial SOC percentage of bus $b$ at the beginning of the working day
is denoted as $\alpha_b$. Let $\Isetinit$ denote the set of initial visit indices for each BEB and let $\Xi_i \in B$ denote the
identification number of the BEB for visit $i$. The initial SOC for bus $\Xi_i$ can be represented as $\eta_{i} =
\alpha_{\Xi_i}\kappa_{\Xi_i}; \forall i \in \Isetinit \subset \Iset$ where $\kappa_{\Xi_i}$ is the battery capacity for bus $\Xi_i$. Lastly, $r_q$ represents
the power supplied from the charger in queue $q \in Q$.

**** Packing and Discretization Parameters
:PROPERTIES:
:CUSTOM_ID: sec:packing-and-discretization-paramaters
:END:

The cost for assigning a charger to queue $q \in Q$ is defined by $\epsilon_q$. $\xi_i$ represents the next arrival index for bus
$b_i$. In other words, suppose the ID of each BEB is recorded in order of arrival. Further suppose that recorded list is
$\xi = \{ 2,1,3,2 \}$, using a starting index of 1, $\xi_1 = 4$ as that is the next visit by bus 2. The arrival and
departure times of bus visit $i$ to the station are denoted as $a_i$ and $e_i$, respectively. The notation $t_h$ is used
to denote a discrete time that is employed to calculate the demand cost. $dt_h$ is the discrete time step $dt_h = t_h -
t_{h-1}$.

#+include: "tab/variables.org"

*** Decision Variables
:PROPERTIES:
:CUSTOM_ID: sec:decision-variables
:END:
Decision variables are those chosen by the optimizer. The variables will be broken into two sections: direct and slack
variables. Direct decision variables are those that the system manipulates directly, and slack variables are those that
are functions of the direct.

**** Direct Decision Variables
:PROPERTIES:
:CUSTOM_ID: sec:direct-decision-variables
:END:
The first two variables are $u_i$ and $d_i \; \forall i \in \Iset$. They represent the initial and final charging times. These
values must remain within range of the arrival and departure times, $[a_i, e_i]$, for visit $i$. The last direct
decision variable is the queue that bus visit $i$ can be placed in to charge, $q_i \in \Qset$.

**** Slack Variables
:PROPERTIES:
:CUSTOM_ID: sec:slack-decision-variables
:END:
Let the initial SOC for a visit be written as $\eta_i$, where $i \in \Iset \setminus \Iset_0$. The initial charge for visit $i$ forms
the foundation from which the SOC of the next visit, $\eta_{\xi_i}$, is calculated. The charge for bus $i$'s next visit is
equal to the initial charge for visit $i$ plus the charge added to it by charger $q_i$ over duration $s_i = d_i - u_i$
minus the discharge accumulated over route $i$, i.e.

#+name: eq:bat-chain
\begin{equation}
  \eta_{\xi_i} = \eta_i + r_{q_i}s_i - \Delta_i\text{.}
\end{equation}

The variables $\sigma_{ij}$ and $\psi_{ij}$ are used to indicate whether a visit pair $(i, j)$ overlap the same space, as show
in \ref{fig:overlap}. These spatiotemporal variables uphold the following relationships:

#+include: eq/bus-spat-temp.org

That is, for every visit, $\sigma_{ij} = 1 \implies$ the start charge time of visit $j$ is greater than the end charge time
of visit $i$. Similarly, $\psi_{ij} = 1 \implies$ the queue for visit $j$ is of a greater index than visit $i$.

The variable $\C$ is the set that describes the availability for all chargers. That is, $\C$ is a set of $n_Q$ sets that
contain available charger times for each queue $q \in Q$. Let a set of available charge times for queue $q$ be defined as
$\C_q$.

#+begin_comment
$q \in \Qset$. In other words, $\C$ defines
the set of times when the chargers are not being utilized or are "inactive". To derive $\C$, consider its complement,
$\C'$, which is the set of "active" time periods for each charger. Let $\C_q' \subset \C'$ describes the active times for
charger $q$. Focusing on an individual charger, consider $\C_q'$ before a schedule has been imposed upon it, $\C_q' = \{
\varnothing \}$. In other words, no buses have been assigned to be charged over some time period $[u_i, d_i]$. After the
scheduling process is complete, $\C_q'$ will have a set of active periods of the form $\C_q' = \{[u_i, d_i]: i \in I\}$.

With a fully defined set $\C_q'$, its compliment can be found, $\C_q$. Let the $j^{\text{th}}$ inactive period be for
charger $q$ be denoted as $\C_{j.q}$. To determine the inverse of $\C_q'$, begin by noting that $\C_q'$ is said to be
disjoint, $\C_q' \bigcap \{[u_j, d_j] : j \in \Jsetq\} = \varnothing$ (i.e. the sets share no common elements)
[cite:@halmos-1974-naive-set-theor]. The inverse of a disjoint set can be found by the De Morgan Law: $(A \cap B)' = A' \cup
B'$. Using De Morgan's Law, the set of inactive periods can be written as $\C_q \equiv \bigcup \{[u_j, d_j]': j \in \Jsetq\}$.
Because of this disjoint property, it is simple to iteratively construct $\C$. As an example, consider charger $q$ at
the beginning of the working day. The charger has no assignments, thus $\C_q = \{[0, \T]\}$. Furthermore, suppose a BEB
was to assigned to charger $q$ for the duration $[u_i, d_i]$ such that $0 < u_i < d_i, < \T$, $\C_q$ would then be
written as $\C_q = \{[0, u_i], [d_i, \T]\}$. Further assignments can then be made within either time frame $[0, u_i]$ or
$[d_i, \T]$.
#+end_comment

** Objective Function
:PROPERTIES:
:CUSTOM_ID: sec:objective-function
:END:
This work aims to minimize the total "cost" of utilizing a given charge schedule. Let $J(\I)$ represent the objective
function. The objective function for this problem has four main considerations: charger assignment, consumption cost,
demand cost, and penalty for an insufficient initial SOC. Each of which will be discussed in turn in the subsequent
sections.

*** Assignment Cost
:PROPERTIES:
:CUSTOM_ID: sec:assignment-cost
:END:

The assignment cost represents the costs of assigning a bus to a particular queue. This is done as a method of
minimizing the total utilized chargers. The assignment cost is written as

#+name: eq:assignment-cost
\begin{equation}
\sum_{i=1}^{n_V} \epsilon_{q_i}r_{q_i}\text{.}
\end{equation}

This cost is effectively the cost on the choice of $q$. Recalling the form of $Q$, particularly the ordering in which
the set was defined. Taking $\epsilon$ to be constructed using the same ordering (idle, slow, then fast charging queues), let
the first $n_B$ queues have no cost. Furthermore, let the next $n_Q$ charging queues be of the form $[P, 2P, ...,
n_QP]$. Concatenating these vectors yields $\epsilon = [[0; n_B], [P, 2P, ..., Pn_Q]]$, where $[0; n_B]$ is used to denote a
vector populated with zeros of length $n_B$. In words, this form accrues no cost when assigning a BEB to an idle queue
while still minimizing charger count and encouraging the use of slow chargers over fast. Thus, the larger the index of
$q$, the larger the cost. The $\epsilon$ vector described above is one of many forms that the vector may take; however, form
shown described is what is applied in this work.

*** Penalty Method
:PROPERTIES:
:CUSTOM_ID: sec:penalty-method
:END:

A penalty method is to be implemented in the objective function that is enabled when the $\eta_i$ falls below a defined
threshold. Let the piecewise function that enables/disables the penalty method be of the form

#+include: eq/penalty.org

Furthermore, letting $x = \eta_i - \nu_{\Xi_i} \kappa_{\Xi_i}$, where $\nu_{\Xi_i} \kappa_{\Xi_i}$ is the minimum charge threshold, applies a penalty
proportional to the difference of the SOC and the threshold squared.

#+begin_src latex
  \begin{figure}[htpb]
    \centering \includegraphics{img/overlap}
    \caption{Examples of different methods of overlapping. Space overlap: $q_{k_1} > q_{i} + 1 \therefore \psi_{ik_{1}} = 1$.
      Time overlap $u_{k_2} < u_{j} + s_j \therefore \sigma_{k_{2}j} = 0$. Similarly, $\sigma_{k_3 i} = 0$.}
    \label{fig:overlap}
  \end{figure}
#+end_src

Using the form of [[eq:penalty]] with and added scalar, $D$, is employed so that the cost of deviating from the threshold
heavily influences the outcome of the objective function. Therefore, the penalty method is written as

#+name: eq:penalty-method
\begin{equation}
\sum_{i=1}^{n_V} D \phi_i(\eta_i - \nu_{\Xi_i} \kappa_{\Xi_i})\text{.}
\end{equation}

*** Consumption Cost
:PROPERTIES:
:CUSTOM_ID: sec:consumpction-cost
:END:

In most cases, energy companies rely on a volumetric rate as a method of track customer electricity consumption (i.e.
total electricity consumed over a billing period). As such, a method of reducing the total energy consumed by the system
is desired. The energy total energy consumed by a charge schedule is defied by what is known as the consumption cost.
The consumption cost is the summation of all the energy being used over all the active periods for each charger in the
time horizon. This is represented by the summation

#+name: eq:consumption-cost
\begin{equation}
\sum_{i=1}^{n_V} r_{q_i}s_i\text{.}
\end{equation}

That is, the charge rate, $r_{q_i}$, for the active charger, $q_i$, is multiplied by the time that the charger will be
utilized, $s_i$.

*** Demand Cost
:PROPERTIES:
:CUSTOM_ID: sec:demand-cost
:END:

Historically for large industrial customers, energy companies often further rely on a demand cost in conjunction with a
consumption cost for billing. The consumption cost is an important metric as it measures how much power a customer may
require over billing period. Energy companies, having to potentially meet large peaks in demand, offset that cost to the
customer. Thus, when a demand and consumption costs are imposed, not only is the total energy reduction desirable, but
also how much power is consumed at a given moment.

A method of calculating the demand charge is done by calculating the average power consumption over a given period of
time. Let the average power used over an arbitrary interval, $T_p$, be represented by

#+name: eq:p
\begin{equation}
p_{T_p}(t) = \frac{1}{T_p} \int_{t-T_p}^{t} p(\tau) d\tau\text{.}
\end{equation}

Energy companies take the largest peak when calculating the demand cost. Therefore, let the cost of the peak power
consumption be dictated by the maximum average power:

#+name: eq:pmax
\begin{equation}
p_{max}(t) = \max\limits_{\tau \in [0,t]}p_{T_p}(\tau)\text{.}
\end{equation}

Furthermore, a fixed minimum average power is introduced that is intended to act as a base threshold before the cost
begins to increase. Let this fixed threshold be defined as $p_{fix}$, the demand cost is calculated using

#+name: eq:pdem
\begin{equation}
p_d(t) = \max(p_{fix},p_{max}(t))\text{.}
\end{equation}

Hence, [[eq:pdem]] defines a cost beginning with a value of $p_{fix}$ from which it may only increase if $p_{15}(t) >
p_{fix}$.

Although the charge times for each BEB is continuous, due to the discrete nature of visits it is simpler to determine a
vector of discrete power consumption over the time horizon from which the average power demand cost may be derived. To
discritize $p_d$, let $h \in \{ 1, 2, ..., n_H \} \subset \mathcal{Z}$ where $n_H$ is the total number of steps. Furthermore, let $p$
define the vector of discrete power consumption over some time interval and let $p_h \in p$ be the discrete power demand
at time step $h$. For conciseness of notation $t_h$ will be abused to denote the time in discrete form (as opposed to
$t$ being continuous), let $dt_h = t_h - t_{h-1}$, and $\Hset = \{ 1, 2, ..., n_H \}$. Thus, for a given visit $i$, the
corresponding discrete indices of $h \in \Hset$ for the range $[u_i, d_i]$ can be determined by first calculating the
total number of steps, $n_h = \frac{d_i - u_i}{dt}$. Once the number of steps is known, the consumed power, $r_{vi}$ can
be added to the correct indices in $p$.

To derive $p$, a vector of discrete power consumption over the time horizon, utilizing scheduled visits is outlined in
\ref{alg:calc-p}. In other words, the objective of \ref{alg:calc-p} to calculate a vector, $p$, that defines the power
consumed over discrete steps throughout time horizon. Line 2 defines the time over which the average power will be
calculated. Line 3 initializes a vector, $p$, with $n_H$ elements populated with zeros. The vector $p$ is used to store
the power consumption for each discrete step over the time horizon $\T$. Line 5 calculates the number of elements in the
charge time $s_i$. Line 6 calculates the index of $p$ for all $n_h$ steps and iterates through each index. Line 7 adds
the power consumed by charging $q_i$ for the $h^{\text{th}}$ step.

#+include: "eq/calc-p.org"

With the consumed power calculated for each time step, the average power consumption for each interval in the time
horizon can be written as follows:

\begin{equation}
p_{T_p}[h] = \frac{1}{T_p} \sum_{h-\frac{T_p}{dt}+1}^h p_h,
\end{equation}

where $T_p \le h \le n_H$. Similarly to before, the maximum $p_{T_p}[h]$ value is to be retained via $p_{max} =
\max\limits_{h \in H}p_{T_p}[h]$. Thus, the discrete demand cost is expressed as

#+name: eq:pd-dis
\begin{equation}
  p_d = \max(p_{fix}, p_{max})z\text{.}
\end{equation}

To conclude this section, the objective function is to written in its entirety:

#+name: eq:objective-function
\begin{equation}
  J(\I) = p_d + \sum_{i=1}^{n_V} \epsilon_{q_i}r_{q_i} + D \phi_i(\eta_i - \nu_{\Xi_i} \kappa_{\Xi_i}) + r_{q_i}s_i\text{.}
\end{equation}

** Constraints
:PROPERTIES:
:CUSTOM_ID: sec:constraints
:END:
Now that a method of calculating the fitness of a schedule has been established, a method for determining the
feasibility of a schedule must be defined. The feasible space for schedules defines the space in which the input and
decision variables describe a schedule that assign BEBs in such a way that there are no spatiotemporal overlaps and
ensures the BEBs are adequately charged throughout the working day while maintaining their route schedules. To ensure
the selected decision variables fall within the feasible space, a set of constraints are applied to a given candidate
solution. The constraints must ensure no overlap temporally or spatially, the BEB must receive enough charge to complete
its next route, the BEB cannot be over-charged, and the BEB must depart on time. The aforementioned constraints are
shown in the following:

#+include: "eq/constraints.org"

# Org mode is a little silly and does not take normal referencing syntax. This note is for future reference.

Constraints \ref{seq:c0}-\ref{seq:c4} are the "queuing constraints". They are preventing overlap both spatially and
temporally as shown in \ref{fig:overlap}. The y-axis represents the possible queues for a bus visit to be placed into,
and the x-axis represents the time that can be reserved for each visit. The shaded rectangles represent time that has
been scheduled in the horizontal direction, and the queue allocated for each bus visit in the vertical direction. In
other words, the set of constraints \ref{seq:c0} - \ref{seq:c4} aim to ensure that these shaded rectangles never
overlap.

Constraint \ref{seq:c4} states that the starting service time for BEB $u_j$ must begin after the previous BEB departs,
$d_i$. The last term utilizes big-M notation to activate or deactivate the constraint. A value of $\sigma_{ij} = 1$ will
activate the constraint to indicate that bus $i$ is complete before bus $j$ is allowed to begin being serviced. If
$\sigma_{ij} = 0$, then the constraint is of the form $\T + d_i > u_j$ rendering the constraint "inactive" because $u_j$
cannot be larger than $\T + d_i$. This effectively allows the charging windows of the vehicle to overlap. This is
important when the BEBs are not in the same queue.

Similarly, $\psi_{ij}$ determines whether the vehicles are charging in the same queue. If $\psi_{ij} = 1$ then \eqref{seq:c1}
is active; thus, vehicle $i$ is in a queue index that is less than BEB $j$. If $\psi_{ij} = 0$ then the constraint is
deactivated and BEB $i$ is in a queue index greater than that of BEB $j$.

 \ref{seq:c5} describes the service time of the bus. \ref{seq:c6} calculates the initial charge for the next visit for
bus $b_i$. \ref{seq:c7} ensures that the bus is not being over-charged. \ref{seq:c8} ensures the continuity of the times
(i.e. the arrival time is less than the initial charge which is less than the detach time which is less than the time
the bus exits the station and all must be less than the time horizon).

#  LocalWords: BEB MILP BEBs Hadamard
