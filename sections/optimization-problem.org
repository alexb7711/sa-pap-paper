* Optimization Problem
:PROPERTIES:
:CUSTOM_ID: optimization-problem
:END:
This sections introduces the problem in the form of the objective function as well MILP constraints. The objective
function is required to allow comparisons between candidate solutions. In the context of this formulation, the objective
function is broken down into two major components as alluded in the introduction: consumption cost, demand cost,
assignment cost, as well as a penalty for under-charging a bus. The constraints ensure that candidate solutions are in
the feasible region. They are composed of a series of equations defined by decision variables which are unknown
variables that are manipulated in the attempt to optimize the objective functions and input variables predefined input
variables that are assumed to be known. Furthermore, the decision variables have components that are directly and
indirectly manipulated. This will be further discussed in [[#sec:decision-variables]].

#+include: "tab/variables.org"

** Parameter Definitions
:PROPERTIES:
:CUSTOM_ID: sec:parameter-definitions
:END:
This section defines the input variables and decision variables used by the system. The input variables are the
parameters that are assumed to be known prior to optimizing the system. These are discussed next in
[[#sec:input-variables]]. The decision variables are the values that the SA algorithm has the freedom to manipulate. The
values produced by the SA algorithm will be interpreted as a candidate scheduling solution. This is further described in
[[#sec:simulated-annealing]].

*** Input Variables
:PROPERTIES:
:CUSTOM_ID: sec:input-variables
:END:
The input values of any MILP system are defined prior to the solving of the system. They specify initial conditions,
known state properties, etc. Roughly following the order in [[tab:variables]], each variable will be introduced.

$\Delta_i$ is the amount power required to complete the bus route after visit $i$. Because there is no route after the
last visit, the power consumed after the final visit is zero. Formally, let $\Jset_b \subset \Iset$ denote the set of
visit indices for bus $b$, and let $\Jset_b^f$ denote the final visit index for bus $b$. Furthermore, let the set of
final visits for each bus, $b$, such that $\Isetfinal = \{ x \in \Isetfinal \subset \Iset : \forall b \in \Bset, x \in
\Jset_b^f \}$. As mentioned before, the last visit for each bus has no discharge and can be written as $\Delta_{i \in
\Isetfinal} = 0$. The discharge for visit all visits $i \in \{\Iset \setminus \Isetfinal\}$, is defined by $\Delta_i =
\delta_i \cdot \rho_i$ where $\delta_i$ is the amount of energy consumed by the bus per mile and $\rho_i$ is the route
mileage after visit $i$. $\rho_i$ is calculated using $\rho_i = \text{average mph} \cdot (a_{\xi_i} - d_i)$. For the
final visits, $\rho_{i \in \Isetfinal} = 0$. The average MPH is assumed to be 20 miles per hour.

$\alpha_b$ is the initial SOC percentage of bus $b$ at the beginning of the working day. The initial SOC for bus $b$ can
be represented as shown in [[eq:batinit]] where $\kappa_b$ is the battery capacity for bus $b$, $\eta_{i \in \Isetinit}$
indicates the initial charge for bus $b$ where $\Isetinit = \{ x \in \Isetinit \subset \Iset : \forall b \in \Bset, x
\in \Jset_b^0 \}$. The rest of the $\eta_i$ terms are considered decision variables and will be further discussed in
[[#sec:decision-variables]]. $dt_h$ is the discrete time step used for calculating the demand cost. $\epsilon_q$ is the cost
for assigning a charger to queue $q$. This parameter is utilized by the objective function and is further discussed in
[[#sec:objective-function]]. $\xi_i$ represents the next arrival index for bus $b_i$. In other words, given a set of bus
visit IDs $\{ 1,2,3,1\}$, using a starting index of 1, $\xi_1 = 4$. This is found by first identifying tho ID of the
first element in $\Iset_b$, which is 1. The next step is to find the next occurrenc of bus 1 in the sequence. In this
exapmple, the next index for bus 1 is $i= 4$. $a_i$ and $e_i$ are the arrival and departure times of bus visit $i$ to
the station, respectively. $k$ represents the local iteration search for the SA algorithm. This is further discussed in
[[#sec:simulated-annealing]]. Lastly, $r_q$ represents the power supplied from the charger in queue $q$.

#+name: eq:batinit
\begin{equation}
  \eta_{i \in \Isetinit} = \alpha_b \cdot \kappa_b
\end{equation}

*** Decision Variables
:PROPERTIES:
:CUSTOM_ID: sec:decision-variables
:END:
Decision variables are the defined by the optimizer and are therefore unknown prior to running the optimization
algorithm. In this case the optimizer is SA. Once the SA has been run, each of the decision variables will be specified and
the fitness of the solution will be determined by the objection functions The variables will be broken into two
sections: direct and indirect decision variables. Decision variables that are direct are values that the system has
direct control over and indirect variables are those that are influenced by the direct.

**** Direct Decision Variables
:PROPERTIES:
:CUSTOM_ID: sec:direct-decision-variables
:END:
Decision variables that are direct are variables that can be immediately chosen by SA. The first two variables are $u_i$
and $d_i \; \forall i \in \Iset$. They represent the initial and final charging times. These values must remain within range of
the arrival time and departure time for visit $i$, $[a_i, e_i]$. $\mu_h$ and $\theta_h$ are binary decision variables, $\mu_h,
\theta_h \in \{0, 1\}$. $\mu_h = 1$ when $u_i \le dt_h$, and is 0 otherwise. $\theta_h = 1$ when $d_i \ge dt_h$ and is 0 otherwise. The
last direct decision variable is the queue that bus visit $i$ can be placed in to charge, $v_i \in \Qset$.

**** Indirect Decision Variables
:PROPERTIES:
:CUSTOM_ID: sec:indirect-decision-variables
:END:
Indirect decision variables are variables that are dependent on direct decision variables. For example $\eta_i$ is the
initial charge for visit $i \in \Iset \setminus \Isetfinal$. These variables are chained together per bus by using the
bus identifier, $b$, and next arrival index, $\xi_i$. The initial charges must be chained so that the battery charge can
be calculated per bus as it is charged and discharged over each visit, $[u_i, d_i]$. The concept of chaining the battery
charges together is shown in [[eq:bat-chain]]. The equation states that the charge for bus $i$'s next visit is equal to the
initial charge for visit $i$ plus the charge added to it by charger $v_i$ over duration $s_i = d_i - u_i$ minus the discharge
accumulated over route $i$.

#+name: eq:bat-chain
\begin{equation}
  \eta_{\xi_i} = \eta_i + r_{v_i}s_i - \Delta_i
\end{equation}

$\iota_h \in \{0,1\} = 1$ when $\mu_h$ and $\theta_h$ are both active and is covered in [[#sec:objective-function]]. $\phi_i$ is a boolean
decision variable, $\phi_i \in \{0,1\}$, that either enables or disables the charge penalty defined in
[[#sec:objective-function]]. $\sigma_{ij}$ and $\psi_{ij}$ are used to indicate whether a visit pair $(i, j)$ overlap the same space
as show in [[fig:spacial-and-temporal-constr]]. A little more formally, [[eq:bus-spat-temp]] describes the relationship that
$\sigma_{ij}$ and $\phi_{ij}$ uphold. That is, for every visit, if the start charge time of either visit $i$ or $j$ is greater
than end charge time of the other, then $\sigma_{ij}$ is active. Similarly, if the queue for visit $i$ and $j$ are different,
then $\psi_{ij}$ is active. These variables will be further elaborated on in [[#sec:constraints]].

#+name: eq:bus-spat-temp
\begin{subequations}
\begin{equation}
  \sigma_{ij} =
  \begin{cases}
    1 & \text{if } u_i \ge d_j, \; i \ne j\\
    0 & \text{otherwise}
  \end{cases}
\end{equation}

\begin{equation}
  \psi_{ij} =
  \begin{cases}
    1 & \text{if } v_i \ge v_j,\; i \ne j\\
    0 & \text{otherwise}
  \end{cases}
\end{equation}
\end{subequations}

$p_d$ is the demand cost of the overall charging schedule. It is calculated after all the decision variables have been
assigned. This is further described in [[#sec:objective-function]].

** Objective Function
:PROPERTIES:
:CUSTOM_ID: sec:objective-function
:END:
The objective function is used to compare the fitness of different candidate solutions against one another. This
objective function takes in input and decision variables to calculate some value of measure. The calculated objective
function value can either be maximized or minimized. The desired option is dependent on the problem to be solved as well
as the formulation of said objective function. Let $J$ represent the objective function. The objective function for this
problem has four main considerations: charger assignment, consumption cost, demand cost, and sufficient charge.

Suppose the objective function is of the form $\text{min } J = \AC + \PC$. $\AC$ is the assignment cost, and $\PC$ is
the power usage cost. The assignment cost represents the costs of assigning a bus to a particular queue as well as the
chosen charging period, $[u_i, d_i]$, as shown in [[eq:ac]]. $v_i \in \Qset$ is the charger index, $u_i$ is the initial
charge time, $d_i$ is the detach time for visit $i$, $\phi_i$ is a binary decision variable, $m$ is the minimum charge
percentage allowed, $\kappa_i$ is the battery capacity for visit $i$, and $\eta_i$ is the charge for $b_i$ when it
arrives for visit $i$.

#+name: eq:ac
\begin{equation}
\AC = \sum_{i=1}^I \Big(\epsilon_{v_i}r_q + \frac{1}{2} C \phi_i (\eta_i - m \kappa_i)^{2}\Big)
\end{equation}

The first term in the summation represents the calculation of the cost for assigning a bus to queue $q$. If $\epsilon_{vi}$ is
taken to be $\epsilon_{v_i} = 1000v_i$, the objective function encourages the model to minimize the total amount of chargers.
Taking this a step further, if the model represents the first $n_{Q_s}$ indices to be slow chargers and the next
$n_{Q_f}$ indices to be fast chargers, where $n_{Q_s} < n_{Q_f} \in \mathcal{Z}$ and $n_{Q_s} + n_{Q_f} = Q$, the model will also encourage the use of slow
chargers over fast. The second term is the penalty function that is either enabled or disabled by $\phi_i$
[cite:@luenberger-2008-penal-barrier-method]. $\phi_i$ is enabled when the initial charge, $\eta_i$, is less than the allowed
minimum charge, $m\kappa_{b_i}$. This is further discussed in [[#sec:constraints]]. Note that the variables $\phi_i$ and $\eta_i$ are
both decision variables that are being multiplied together. This is called a bilinear term. Using a traditional MILP
solver, this would require linearization [cite:@rodriguez-2013-compar-asses]; however, because SA handles nonlinearities
easily these bilinear terms will be ignored [cite:@radosavljevic-2018-metah-optim].

The demand cost quantifies the amount of power being used over a given period and adjusts the cost accordingly. The
consumption cost calculates the total amount of power being consumed by the chargers. The consumption cost is merely the
summation of all the energy being used over all the active periods for each charger in the time horizon as written in
[[eq:consumption-cost]]. $r_{v_i}$ is the charge rate for the active charger $v_i$ and is multiplied by the time that the
charger will be utilized, $s_i$.

#+name: eq:consumption-cost
\begin{equation}
  \sum_{i=1}^I r_{v_i}s_i
\end{equation}

The demand cost is calculated based on 15 minute increments (0.25 hours). This cost is also referred to as the peak 15. The
average power used over an arbitrary 15-minute interval is represented by [[eq:p15]].

#+name: eq:p15
\begin{equation}
p_{15}(t) = 0.25 \int_{t-0.25}^{t} p(\tau) d\tau
\end{equation}

Worst case must be assumed to always ensure enough power is supplied; therefore, the maximum value found is retained as
represented in [[eq:pmax]].

#+name: eq:pmax
\begin{equation}
p_{max}(t) = \text{max}_{\tau \in [0,t]}p_{15}(\tau)
\end{equation}

A fixed minimum threshold, $p_{fix}$, is introduced as a base power rate to be charged at. Let this fixed threshold be
defined as $p_{fix}$. In a similar manner as $p_{max}$, the maximum value is retained. Furthermore, let $s_r$ define the
demand rate which has the units of \(\frac{\$}{kW}\).

#+name: eq:pdem
\begin{equation}
p_d(t) = \text{max}(p_{fix},p_{max}(t))s_r
\end{equation}

[[eq:pdem]], again, retains the largest $p_{dem}$ value with a starting fixed value of $p_{fix}$. To write the total power
demand at any discrete time, consider [[eq:discrete-power]]. Let $\omega_h \in \omega$ be the discrete power demand at time step $h$
where $h \in \{ 1, 2, ..., H \} \subset \mathcal{Z}$ and $H = \frac{T}{0.25}$. For conciseness of notation we will abuse $t_h$ to denote
the time in discrete form (as opposed to $t$ being continuous), let $dt_h = t_h - t_{h-1}$, and $\Hset = \{ 1, 2, ..., H
\}$. Let $\iota_h$ be a binary decision variable that is enabled if charger $v_i \in \Qset$ is enabled in the time frame
$dt_h$. Let the power usage of charger $v_i$ be denoted as $r_{v_i}$.

#+name: eq:discrete-power
\begin{equation}
  \omega_h = \sum_i^I \iota_h \cdot r_{v_i}
\end{equation}

The average power can be rewritten as $p_{15}^h = \omega_h$, $p_d$ can be rewritten as $p_d^h = \text{max}_{h \in \Hset}
(p_{15}^{h})$, there the $h$ repesents the $h^{\text{th}}$ step. Finally, $p_d^f$ can be written as [[eq:pd-dis]].

#+name: eq:pd-dis
\begin{equation}
  p_d^h = \text{max}_{h \in \Hset}(p_{fix}, p_{max}^h)s_d
\end{equation}

To write the power cost, [[eq:consumption-cost]] and [[eq:pd-dis]] are added together to create [[eq:pc]].

#+name: eq:pc
\begin{equation}
\PC = p^h_d + \sum_{i=1}^I \Big( r_{v_i}s_i \Big)
\end{equation}

** Constraints
:PROPERTIES:
:CUSTOM_ID: sec:constraints
:END:
Now that a method of calculating the fitness of a schedule has been established, a method for determining the
feasibility of a schedule must be defined. Feasible schedules require that the schedule maintain a certain list of
properties. These properties are enforced by a set of constraints derived from the MILP PAP. The constraints must ensure
no overlap temporally or spatially, receives enough charge to complete route after each visit $i$, bus visit $i$ cannot
be over-charged, and departs on time. The aforementioned constraints are shown in [[eq:constraints]].

#+include: "eq/constraints.org"

# Org mode is a little silly and does not take normal referencing syntax. This note is for future reference.

Constraints \ref{seq:c0}-\ref{seq:c4} are the "queuing constraints". They are preventing overlap in both spatially and
temporally as shown in [[fig:spacial-and-temporal-constr]]. The y-axis represents the possible queues for a bus visit to be
placed into, and the x-axis represents the time that can be reserved for each visit. The shaded rectangles represent
time that has been scheduled, and the queue allocated for each bus visit. The set of constraints \ref{seq:c0} -
\ref{seq:c4} aim to ensure that these shaded rectangles never overlap.

#+include: "img/spacial-temporal-constr.org"

Constraint \ref{seq:c4} states that the starting service time for bus $j$, $u_j$, must be greater than the starting time
of bus $i$, $u_i$, plus its service time, $s_i$. The last term utilizes big-M notation to activate or deactivate the
constraint. A value of $\sigma_{ij} = 1$ will activate the constraint to ensure that bus $i$ is complete before bus $j$ is
allowed to begin being serviced. If $\sigma_{ij} = 0$, then the constraint is of the form $T + u_j + s_j > u_i$ rendering the
constraint "inactive" because $u_i$ cannot be larger than $d_i$. This effectively allows the charging windows of the
vehicle to overlap.

Similarly, $\phi_{ij}$ determines whether the vehicles will be charging in the same queue. If $\phi_{ij} = 1$ then
\eqref{seq:c1} is rendered active and vehicle $i$ and $j$ must be charging in different queues. If $\phi_{ij} = 0$ then the
constraint is deactivated and the vehicle queue assignments may be the same.

\ref{seq:c5} calculates the discharge for the route after visit $i$. \ref{seq:c6} describes the service time of the bus.
\ref{seq:c7} calculates the initial charge for the next visit for bus $b_i$. \ref{seq:c7} ensures that the bus is not
being over-charged. \ref{seq:c9} and \ref{seq:c10} are used to enable and disable the penalty method in [[eq:ac]]. This is
done by checking if the initial charge for visit $i$ is greater than or equal to the minimum allowed charge.
\ref{seq:c10} ensures the continuity of the times (i.e. the arrival time is less than the initial charge which is less
than the detach time which is less than the time the bus exits the station and all must be less than the time horizon).

The last set of constraints \ref{seq:c13} - \ref{seq:c17} set the rules for the decision variable $\iota_h$. \ref{seq:c13}
and \ref{seq:c14} ensure that the initial charge time for visit $i$, $u_i$, is greater than the discrete time, $0.25 \cdot
h$, being checked. Similarly, \ref{seq:c15} and \ref{seq:c16} ensure that the final charge time, $d_i$, is less than the
next discrete time step, $dt_h$. The final constraint \ref{seq:c17} is the discrete representation of whether charger
$v_i \in \Qset$ is active.
