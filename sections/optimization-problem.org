* Optimization Problem
:PROPERTIES:
:CUSTOM_ID: sec:optimization-problem
:END:
The problem outlined in this work is presented in the form of an objective function with MILP constraints. The objective
function is required to allow relative comparisons between candidate solutions. In the context of this formulation, the
MILP constraints ensure that candidate solutions are feasible. They are composed of a set of equations defined by input
and decision variables. The input parameters are those that are assumed to be known. Decision variables are those which
may be manipulated, and are chosen in an attempt to optimize the objective function. The objective function is broken
down into four major components: consumption cost, demand cost, assignment cost, and under-charging cost (i.e. a penalty
for meeting minimum charge requirements). The input and decision variables are introduced in [[#sec:input-variables]] and
[[#sec:decision-variables]]. The objective function is introduced in [[#sec:objective-function]]. The constraints will then be
introduced in [[#sec:constraints]].

** Variable Definitions
:PROPERTIES:
:CUSTOM_ID: sec:parameter-definitions
:END:
This section defines the input and decision variables used by the system. The input parameters are assumed to be fixed
prior to optimizing the system. The decision variables are the values that the SA algorithm has the freedom to
manipulate. The variables to be introduced are summarized in [[tab:variables]].

*** Parameters
:PROPERTIES:
:CUSTOM_ID: sec:input-variables
:END:

The parameters utilized in this work are those that are known prior to optimization. $\Delta_i$ is the amount energy required
to complete the bus route after visit $i$. There are no routes after the last visit for each BEB; thus; the energy
consumed after the final visit is zero. Let the set of final visits for all BEBs be denoted as $\Isetfinal$. That is,
the cardinality of the set is $\lvert \Isetfinal \rvert = n_B$ where the $b^{\text{th}}$ item in $\Isetfinal$ provides
the index for the final visit of bus $b$. The discharge for the final visit of each BEB is then defined as $\forall i \in
\Isetfinal; \Delta_{i} = 0$. The initial SOC percentage of bus $b$ at the beginning of the working day is denoted as $\alpha_b$.
Let $\Isetinit$ denote the set of initial visit indices for each BEB and let $\Xi_i \in B$ denote the identification number
of the BEB for visit $i$. The initial SOC for bus $\Xi_i$ can be represented as $\forall i \in \Isetinit; \eta_{i} = \alpha_{\Xi_i}\kappa_{\Xi_i}$
where $\kappa_{\Xi_i}$ is the battery capacity for bus $\Xi_i$. The rest of the values for $\eta_i : i \in I \setminus \Isetinit$ are
considered decision variables and will be further discussed in [[#sec:decision-variables]]. The notation $t_h$ is used to
denote a discrete time that is employed to calculate the demand cost. $dt_h$ is the discrete time step $dt_h = t_h -
t_{h-1}$. The cost for assigning a charger to queue $q \in Q$ is defined by $\epsilon_q$. $\xi_i$ represents the next arrival index
for bus $b_i$. In other words, suppose the ID of each BEB is recorded in order of arrival. Further suppose that recorded
list is $\xi = \{ 2,1,3,2 \}$, using a starting index of 1, $\xi_1 = 4$ as that is the next visit by bus 2. The arrival and
departure times of bus visit $i$ to the station are denoted as $a_i$ and $e_i$, respectively. Lastly, $r_q$ represents
the power supplied from the charger in queue $q \in Q$.

#+include: "tab/variables.org"

*** Decision Variables
:PROPERTIES:
:CUSTOM_ID: sec:decision-variables
:END:
Decision variables are those chosen by the optimizer. The variables will be broken into two sections: direct and
indirect decision variables. Direct decision variables are those that the system manipulates directly, and indirect
variables are those that are influenced by the direct.

**** Direct Decision Variables
:PROPERTIES:
:CUSTOM_ID: sec:direct-decision-variables
:END:
The first two variables are $u_i$ and $d_i \; \forall i \in \Iset$. They represent the initial and final charging times. These
values must remain within range of the arrival and departure times, $[a_i, e_i]$, for visit $i$. The last direct
decision variable is the queue that bus visit $i$ can be placed in to charge, $q_i \in \Qset$.

**** Indirect Decision Variables
:PROPERTIES:
:CUSTOM_ID: sec:indirect-decision-variables
:END:
Let the initial SOC for a visit be written as $\eta_i$, where $i \in \Iset \setminus \Iset_0$. The initial charge for visit $i$ forms
the foundation from which the SOC of the next visit, $\xi_i$, is calculated. This propagation of the SOC is evaluated as
shown in [[eq:bat-chain]]. The equation states that the charge for bus $i$'s next visit is equal to the initial charge for
visit $i$ plus the charge added to it by charger $q_i$ over duration $s_i = d_i - u_i$ minus the discharge accumulated
over route $i$.

#+name: eq:bat-chain
\begin{equation}
  \eta_{\xi_i} = \eta_i + r_{q_i}s_i - \Delta_i
\end{equation}

A penalty method is to be implemented in the objective function that is enabled when the $\eta_i$ falls below a defined
threshold. Let the piecewise function that enables/disables the penalty method be of the form [[eq:penalty]].

#+include: eq/penalty.org

If $x = \eta_i - \nu_{\Xi_i} \kappa_{\Xi_i}$, where $\nu_{\Xi_i} \kappa_{\Xi_i}$ is the minimum charge threshold, then [[eq:penalty]] defines the
penalty method that encourages schedules to maintain the SOC for each visit above $\nu_{\Xi_i} \kappa_{\Xi_i}$. If the SOC is falls
below the specified threshold, a penalty proportional to the difference of the SOC and the threshold squared is applied.

#+begin_src latex
  \begin{figure}[htpb]
    \centering \includegraphics{sections/img/overlap}
    \caption{Examples of different methods of overlapping. Space overlap: $q_{k_1} > q_{i} + 1 \therefore \psi_{ik_{1}} = 1$.
      Time overlap $u_{k_2} < u_{j} + s_j \therefore \sigma_{k_{2}j} = 0$. Similarly, $\sigma_{k_3 i} = 0$.}
    \label{fig:overlap}
  \end{figure}
#+end_src

The variables $\sigma_{ij}$ and $\psi_{ij}$ are used to indicate whether a visit pair $(i, j)$ overlap the same space as show in
\ref{fig:overlap}. Formally, [[eq:bus-spat-temp]] describes the relationship that $\sigma_{ij}$ and $\psi_{ij}$ uphold. That is, for
every visit, if the start charge time of visit $j$ is greater than the end charge time of visit $i$, then $\sigma_{ij}$ is
active ($\sigma_{ij} = 1$). Similarly, if the queue for visit $j$ is in a queue that is in a queue of a greater index than
visit $i$, then $\psi_{ij}$ is active ($\psi_{ij} = 1$). These variables will be further elaborated on in [[#sec:constraints]].

#+include: eq/bus-spat-temp.org

The demand cost, $p_d$, of the charging schedule. It is calculated after all the decision variables have been assigned.

** Objective Function
:PROPERTIES:
:CUSTOM_ID: sec:objective-function
:END:
The objective function is used to compare the relative fitness of different candidate solutions against one another.
This objective function takes in input and decision variables to calculate some value of measure. The calculated
objective function value can either be maximized or minimized; the desired option is dependent on the problem to be
solved as well as the formulation of said objective function. Let $J$ represent the objective function. The objective
function for this problem has four main considerations: charger assignment, consumption cost, demand cost, and penalty
for an insufficient initial SOC. These considerations are divided into two components: The assignment cost and the
utility cost.

Suppose the objective function is of the form $\text{min } J = \AC + \UC$. $\AC$ is the assignment cost, and $\UC$ is
the utility cost. The assignment cost represents the costs of assigning a bus to a particular queue as well as the
chosen charging period, $[u_i, d_i]$. The assignment cost increases its cost as the selected index increases and the
cost of the chosen charge times is implemented by utilizing a penalty method. The penalty method assigns a high cost to
the system if it falls below the specified SOC threshold, $\nu_b \kappa_b$. The assignment cost is defined as

#+name: eq:ac
\begin{equation}
\AC = \sum_{i=1}^{n_V} \Big(\epsilon_{q_i}r_{q_i} + D \phi_i(\eta_i - \nu_{\Xi_i} \kappa_{\Xi_i}) \Big)\text{.}
\end{equation}

The first term in the summation represents the calculation of the cost for assigning a bus to queue $q \in Q$. Let $\epsilon$ be
a vector of the form $\epsilon = [100, 200, ..., 100n_Q]$. When written in this way, $\epsilon$ encourages the objective function to
minimize the total amount of chargers. Iterating on this concept, let the first $n_B$ indices to be idle queues (i.e.
queues in which no charge is supplied), the next $n_{Q_s}$ indices to be slow chargers, and the next $n_{Q_f}$ indices
to be fast chargers, where $n_B, n_{Q_s}, n_{Q_f} \in \mathcal{Z}$ and $n_B + n_{Q_s} + n_{Q_f} = n_Q$. The $\epsilon$ vector thus be
concatenated as follows: $\epsilon = [[0; n_B], [100, 200, ..., 100n_Q]]$, where $[0; n_B]$ indicates a zero vector of length
$n_B$. That is, $\epsilon_{q_i}$ has no cost if $q_i \le n_B$ or is incrementally penalized as the selected queue index increases
if $n_B < q_i \le n_B + n_{Q_s} + n_{Q_f}$. In words, this form accrues no cost when assigning a BEB to an idle queue
while still minimizing charger count and encouraging the use of slow chargers over fast. While the $\epsilon$ vector can be
constructed in many other ways, the form shown above is the method applied to this work.

The second term is the penalty function that is either enabled or disabled by $\phi_i$ similarly to [[eq:penalty]]
[cite:@luenberger-2008-penal-barrier-method]. The penalty function is enabled, $\phi_i = (\eta_i - \nu_{\Xi_i} \kappa_{\Xi_i})^2$, if the
SOC falls below a specified threshold, $\eta_i \le \nu_{\Xi_i} \kappa_{\Xi_i}$, and is disabled, $\phi_i = 0$, otherwise. This term is
considered an assignment cost because the penalty method is enabled due to poor allocations of BEBs. That is, the cost
is not impacted by how much the system consumes energy, but by how the BEBs have been assigned. $D$ is a large constant
value used to scale the penalty function.

The utility cost is composed of the consumption cost and the demand cost. The consumption cost is merely the summation
of all the energy being used over all the active periods for each charger in the time horizon, $\sum_{i=1}^{n_V}
r_{q_i}s_i$. That is, the charge rate, $r_{q_i}$, for the active charger, $q_i$, is multiplied by the time that the
charger will be utilized, $s_i$.

The demand cost quantifies the amount of power being used over a given period of time and increases the cost if too much
power is utilized within said period. A typical period in which to calculate the demand cost is over 15 minute
increments (900 seconds). Let the average power used over an arbitrary 15-minute interval be represented by [[eq:p15]].

#+name: eq:p15
\begin{equation}
p_{15}(t) = 900 \int_{t-900}^{t} p(\tau) d\tau
\end{equation}

Worst case must be assumed to ensure enough power is available during peak hours; therefore, the maximum value found is
retained.

#+name: eq:pmax
\begin{equation}
p_{max}(t) = \max\limits_{\tau \in [0,t]}p_{15}(\tau)
\end{equation}

[[eq:pmax]] is thus a function that describes the largest demand cost found up to time $t$. A fixed minimum average power is
introduced that is intended to act as a base threshold before the cost begins to increase. Let this fixed threshold be
defined as $p_{fix}$. Furthermore, let $z$ define the demand rate which has the units of \(\frac{\$}{kW}\).

#+name: eq:pdem
\begin{equation}
p_d(t) = \max(p_{fix},p_{max}(t))z
\end{equation}

Hence, [[eq:pdem]] begins with a value of $p_{fix}$ from which it may only increase if $p_{15}(t) > p_{fix}$. To discritize
$p_d$, let $h \in \{ 1, 2, ..., n_H \} \subset \mathcal{Z}$ and $n_H = \frac{T}{900}$. Furthermore, let $p$ define the vector of discrete
power consumption and let $p_h \in p$ be the discrete power demand at time step $h$. For conciseness of notation we will
abuse $t_h$ to denote the time in discrete form (as opposed to $t$ being continuous), let $dt_h = t_h - t_{h-1}$, and
$\Hset = \{ 1, 2, ..., n_H \}$. The charger speed, $r_{q_i}$, and the initial and final charge times, $u_i$ and $d_i$,
respectively, are known. Thus, the corresponding discrete indices of $h \in \Hset$ for the range $[u_i, d_i]$ can be
determined by first calculating the total number of steps in the range $n_h = \frac{d_i - u_i}{dt}$. Once the number of
steps are know, the consumed power, $r_{vi}$ can be added to the correct indices in $p$. This procedure is outlined in
\ref{alg:calc-p}.

#+include: "eq/calc-p.org"

With the consumed power calculated for each time step, the peak 15 for each interval in the time horizon can be written
as follows.

\begin{equation}
p_{15}[h] = \sum_{h-\frac{900}{dt}+1}^h p_h,
\end{equation}

where $15 \le h \le n_H$. Similarly to before, the maximum $p_{15}[h]$ value is to be retained via $p_{max} = \max\limits_{h
\in H}p_{15}[h]$. Thus, the discrete demand cost is expressed as shown in [[eq:pd-dis]].

#+name: eq:pd-dis
\begin{equation}
  p_d = \max(p_{fix}, p_{max})z
\end{equation}

To write the utility cost the consumption and [[eq:pd-dis]] are added together to create [[eq:pc]].

#+name: eq:pc
\begin{equation}
\UC = p_d + \sum_{i=1}^I \Big( r_{q_i}s_i \Big)
\end{equation}

** Constraints
:PROPERTIES:
:CUSTOM_ID: sec:constraints
:END:
Now that a method of calculating the fitness of a schedule has been established, a method for determining the
feasibility of a schedule must be defined. The feasible space for schedules defines the space in which the input and
decision variables describe a schedule that would keep the BEBs adequately charged throughout the working day while
maintaining their route schedules. To ensure the selected decision variables fall within the feasible space, a set of
constraints are applied to a given candidate solution. The constraints must ensure no overlap temporally or spatially,
the BEB must receive enough charge to complete its next route, the BEB cannot be over-charged, and the BEB must depart
on time. The aforementioned constraints are shown in \ref{eq:constraints}.

#+include: "eq/constraints.org"

# Org mode is a little silly and does not take normal referencing syntax. This note is for future reference.

Constraints \ref{seq:c0}-\ref{seq:c4} are the "queuing constraints". They are preventing overlap both spatially and
temporally as shown in \ref{fig:overlap}. The y-axis represents the possible queues for a bus visit to be placed into,
and the x-axis represents the time that can be reserved for each visit. The shaded rectangles represent time that has
been scheduled in the horizontal direction, and the queue allocated for each bus visit in the vertical direction. In
other words, the set of constraints \ref{seq:c0} - \ref{seq:c4} aim to ensure that these shaded rectangles never
overlap.

Constraint \ref{seq:c4} states that the starting service time for BEB $u_j$ must begin after the previous BEB departs,
$d_i$. The last term utilizes big-M notation to activate or deactivate the constraint. A value of $\sigma_{ij} = 1$ will
activate the constraint to indicate that bus $i$ is complete before bus $j$ is allowed to begin being serviced. If
$\sigma_{ij} = 0$, then the constraint is of the form $\T + d_i > u_j$ rendering the constraint "inactive" because $u_j$
cannot be larger than $\T + d_i$. This effectively allows the charging windows of the vehicle to overlap. This is
important when the BEBs are not in the same queue.

Similarly, $\psi_{ij}$ determines whether the vehicles are charging in the same queue. If $\psi_{ij} = 1$ then \eqref{seq:c1}
is active; thus, vehicle $i$ is in a queue index that is less than BEB $j$. If $\psi_{ij} = 0$ then the constraint is
deactivated and BEB $i$ is in a queue index greater than that of BEB $j$.

 \ref{seq:c5} describes the service time of the bus. \ref{seq:c6} calculates the initial charge for the next visit for
bus $b_i$. \ref{seq:c7} ensures that the bus is not being over-charged. \ref{seq:c8} ensures the continuity of the times
(i.e. the arrival time is less than the initial charge which is less than the detach time which is less than the time
the bus exits the station and all must be less than the time horizon).

#  LocalWords: BEB MILP BEBs Hadamard
