* Optimization Algorithm
:PROPERTIES:
:CUSTOM_ID: sec:sa-optimization-algorithm
:END:

This section combines the generation algorithms and the optimization problem into a single algorithm (\ref{alg:sa-pap}).
Generally, SA assumes that the generated candidate solutions are within the solution space of the problem, $\Sol \in S$
where $S$ is the solution space. In other words, the initialization and perturbations of a schedule must be verified to
ensure that the generated schedule is in the solution space. Therefore, the objective function and constraints
introduced in [[#sec:sa-constraints]] and [[#sec:sa-objective-function]], respectively, must be employed to verify that the
outputs of \ref{alg:charge-schedule-generation} and \ref{alg:perturb-schedule} are in the feasible space, $S$.

As previously stated, the generating functions directly influence the values of the assigned charge queue, charge
initialization time, and charge completion time: $q_i$, $u_i$, and $d_i$, respectively. Having generated those values,
the rest of the decision variables may be derived. Beginning with the packing constraints, \ref{seq:c0}-\ref{seq:c1} are
employed to enable and disable $\sigma_{ij}$ and $\psi_{ij}$ and \ref{seq:c2}-\ref{seq:c4} ensure the validity of the values.
\ref{seq:c5} can be directly calculated and \ref{seq:c8} is fully defined.

Changing the focus over to the dynamic constraints, similarly to what was seen with the packing constraints, the battery
dynamic constraints are also fully defined. \ref{seq:c6} is sequentially calculated after a given schedule has been
created. \ref{seq:c7} is evaluated to ensure the BEB is not overcharged. The penalty method implemented in
[[#sec:sa-objective-function]] is set in place to allow the SOC to go below the specified threshold, $\nu_{b_i} \kappa_{b_i}$, but
punish the solution for doing so. Thus, over time, the candidate solutions will be encouraged toward a solution that
does not activate the penalty method (i.e., is solution is operationally feasible).

The implementation of the SA PAP, outlined in \ref{alg:sa-pap}, will now be discussed. The algorithm begins by creating
a temperature schedule and creating an initial solution. The algorithm then iterates through the temperature schedule
(outer loop). For each iteration of the outer loop, an inner loop is executed $n_K$ times. During this inner loop, the
solution is modified by a primitive generating function to create a candidate solution. The candidate is solution is
then compared with the active solution, and updated according to the acceptance criteria. These actions are performed
until the cooling equation is exhausted.

#+include: eq/sa-pap-pseudo.org
