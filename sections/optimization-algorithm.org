* Optimization Algorithm
:PROPERTIES:
:CUSTOM_ID: sec:optimization-algorithm
:END:

This section combines the generation algorithms and the optimization problem into a single algorithm. It begins with an
introduction and discussion of a general SA algorithm which will be used to springboard into the construction of the SA
PAP algorithm. _For the case of the pseudo SA algorithm to be presented, the notation will be self-contained and not
related to any of the variables presented for SA PAP thus far_.

** Simulated Annealing Pseudo Code
:PROPERTIES:
:CUSTOM_ID: sec:simulated-annealing-pseudo-code
:END:

Consider \ref{alg:sa-pseudo} [cite:@henderson-1989-theor-pract]. Let $\omega$ and $\omega'$ are the current solution and the
candidate solution, respectively. Let $\Tau$ denote the temperature function and $\Tau_0$ the initial temperature.
Furthermore, let $t$ be defined as the vector of temperatures defined by $t = \Tau(\Tau_0, \Tau_f)$, and let $t_k$ be
defined as being an element of $t$, $t_k \in t$. Let $J$ be the repetition counter, it defines the number of iterations to
execute for each step in temperature, $t_k$.

The algorithm behaves as follows: initialize the SA algorithm with an initial solution, temperature schedule, and
repetition schedule. The first loops through all the values in $t_k$, the second loop finished when $j = J$. For each
loop, create a new solution, $N(\omega)$, calculate the difference in the fitness of $\omega$ and $\omega'$. Update $\omega$ with $\omega'$ if
the candidate solution is better or update $\omega$ with $\omega'$ with probability $e^{\frac{-\Delta_{\omega , \omega'}}{t_k}}$ if the candidate
solution is worse than the current solution. Then the new candidate solution is modified slightly, $M(\omega')$, to produce
an altered new candidate solution $\omega{''}$. The modified candidate solution is then compared to $\omega$ similarly as before.
The modifications then occurs over $J$ iterations. This is repeated for all temperatures in $t_k$.

#+include: eq/sa-pseudo.org

** SA PAP Pseudo Code
:PROPERTIES:
:CUSTOM_ID: sec:sa-pap-pseudo-code
:END:

Now that the general SA algorithm has been outlined, the objective is now to outline SA-PAP in \ref{alg:sa-pap}. While
the SA PAP generally is outlined almost identically to that of the general SA algorithm, SA assumes that the new
solution generated, $\omega'$ in the case of \ref{alg:sa-pseudo}, is in the solution space of the problem, $\omega \in S$ where $S$
is the solution space. Referring to \ref{alg:charge-schedule-generation}, the generating function for SA PAP, note that
assignments are made at random. One is to expect that the output generated by this function may not be in the solution
space. Therefore, the constraints introduced in [[#sec:constraints]] must be employed to verify that the output of
\ref{alg:charge-schedule-generation} is in the feasible space.

As previously stated, the generating functions directly influence the values of the assigned charge queue, charge
initialization time, and charge completion time: $v_i$, $u_i$, and $d_i$, respectively. Having generated those values,
the rest of the decision variables may be derived. Let's begin by reviewing over the packing constraints.
\ref{seq:c0}-\ref{seq:c1} are employed to enable and disable $\sigma_{ij}$ and $\psi_{ij}$ and \ref{seq:c2}-\ref{seq:c4} ensure
the validity of the set values. \ref{seq:c5} can be directly calculated and \ref{seq:c11} is fully defined.

Now let's change the focus over to the dynamic constraints. Similar to what was seen with the packing constraints, the
battery dynamic constraints are also fully defined and can be calculated. \ref{seq:c6} is sequentially calculated while
\ref{seq:c7}-\ref{seq:c9} can be evaluated to ensure the charge propagation is feasible. Thus, the constraints to
enable/disable the penalty function, \ref{seq:c9}-\ref{seq:c10}, can be executed to determine the value of $\phi_i$ for
each visit. \ref{seq:c12}-\ref{seq:c15} may also be evaluated to find the values of $\theta_h^{v_i}$ and $\mu_h^{v_i}$ which
then directly leads to \ref{seq:c16} being able to be determined. Once all these constraints have been calculated and
evaluated to be true will a generated solution be considered in the feasible space. Let the feasible space be denoted as
$S$.

Lines 2-3 initialize the SA algorithm by creating a vector of temperature values based on a temperature schedule $\Tau$,
and an initial temperature $\Tau_0$ and then generating an initial solution. Line 4 loops through each of the step in
the temperature schedule $t_k \in t$. Lines 4 and 5 generates a new solution then calculates its fitness. $\nu$ in this
context is defined as $\nu = (u, d, v, \eta)$. Lines 6 through 11 update the solution depending on if the new solution is in
the solution space a whether the new solution is more or less fit than the active solution. Line 12 iterates through the
repetition schedule, $k \in \{1, 2, ..., n_K\}$. Lines 13 perturbs the previously generated solution. Lines 15-20
calculates its fitness, and updates the current solution with the candidate solution depends upon whether the newly
generated solution is in the solution space and also the fitness in the same was that was done before.

#+include: eq/sa-pap-pseudo.org
