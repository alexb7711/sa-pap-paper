* Simulated Annealing
:PROPERTIES:
:CUSTOM_ID: sec:simulated-annealing
:END:
SA is a well-studied local search metaheuristic used to solve discrete and (to a lesser degree) continuous problem
[cite:@gendreau-2018-handb-metah]. A metaheuristic is a high-level problem-independent algorithm framework that provides
a set of guidelines or strategies to develop heuristic optimization algorithms [cite:@radosavljevic-2018-metah-optim].
Metaheuristic problems primarily fit in two categories: population-based and single-solution-based. Population based
algorithms emphasize exploration of the solution space as apposed to single-solutions-based algorithms being more
exploitation oriented [cite:@radosavljevic-2018-metah-optim]. Generally, metaheuristic algorithms share the basic
advantage of speed in finding a satisfactory solution for large-scale practical optimization problems
[cite:@radosavljevic-2018-metah-optim]. SA, however, is sometimes criticized for the speed at which it converges to the
global optimum [cite:@gendreau-2018-handb-metah; @henderson-1989-theor-pract].

SA is an exploitation oriented, single-solution based metaheuristic. In addition to the advantages of simplicity, both
theoretically and implementation, the algorithm has an inherent ability to overcome non-linearities
[cite:@gendreau-2018-handb-metah;@radosavljevic-2018-metah-optim]. This model is named after its analogized process
where a crystalline solid is heated then allowed to cool at a slow rate until it achieves its most regular possible
crystal lattice configuration [cite:@henderson-1989-theor-pract]. SA establishes a connection between this thermodynamic
process and the search for global optima in optimization problems.

There are five key components to SA: initial temperature, cooling schedule (temperature function), generation
mechanisms, acceptance criteria, and a local search iteration count (temperature change counter)
[cite:@keller-2019-multi-objec]. The temperature function describes the speed at which the system is "cooled" over each
iteration. The generation mechanisms provide a means of modifying the system by some singular discrete change that is
within the neighborhood of the previous solution [cite:@gendreau-2018-handb-metah]. The acceptance criteria is a
function of the system temperature that makes the decision whether the system will accept an inferior solution in favor
of exploring the solution space. Finally, the local search iteration count is the number of steps taken to try to
exploit a solution at a constant temperature. Each of these mechanisms are elaborated in the subsequent sections.

** Cooling Equation
:PROPERTIES:
:CUSTOM_ID: cooling-equation-experimental
:END:
The temperature function models a "rate of cooling" for the SA process. Initially, when the temperature is high, SA
encourages exploration. As the process begins to "cools down" (in accordance to the cooling schedule), it begins to
encourage local exploitation of the solution (rather than exploration)
[cite:@rutenbar-1989-simul-anneal-algor;@henderson-1989-theor-pract]. There are three common basic types of cooling
equations: linear, geometric, and exponential. Each schedule is depicted in [[fig:cool]] [cite:@keller-2019-multi-objec].
Every plot begin with an initial temperature of $T_0 = 500^\circ\; C$ and a final temperature of $T_f = 1^\circ\; C$. The
different cooling schedules dictate the rate at which the algorithm progressively disallows exploration. Let the vector
of temperatures described by a cooling schedule be defined as $t$. Furthermore, let an element of the vector be denoted
as $t_m \in t$, where $m \in [0,...,M]$ and $M = \lvert t \rvert$. A linear cooling schedule is defined by [[eq:cool0]].

#+name: eq:cool0
\begin{equation}
t_m = t_{m-1} - \delta_0
\end{equation}

with $t_0 = \Tau_0$ and $\delta_0 = 1/2\; C^\circ$ in [[fig:cool]]. The value of $\delta_0$ may vary anywhere in the range $\delta_0 \in \mathbb{R}^+$. A
geometric cooling schedules is as defined in [[eq:cool1]]. This schedule type is most widely used in practice
[cite:@keller-2019-multi-objec]. As such, it will also be employed by the work in this paper.

#+name: eq:cool1
  \begin{equation}
  t_m = \delta t_{m-1}
  \end{equation}

where $\delta = 0.995$ in [[fig:cool]]. The gain variable, $\delta$, may vary anywhere between the range $[0,1)$. An exponential
cooling schedule is defined by the difference equation as shown in [[eq:cool2]].

#+name: eq:cool2
\begin{equation}
t_m = e^{-\delta}t_{m-1}
\end{equation}

where $\delta = 0.01$ in [[fig:cool]]. A typical range for $\delta$ is $0.8 \le \delta \le 0.99$ [cite:@delahaye-2019-simul].

#+name: fig:cool
#+ATTR_ORG: :width 200
#+ATTR_LATEX: :width 0.5\textwidth
#+caption: Cooling equations
[[file:img/cool_func.png]]

** Acceptance Criteria
:PROPERTIES:
:CUSTOM_ID: sec:acceptance
:END:
In SA, the algorithm stores a candidate solution that is continuously compared to newly generated solutions. Let the
stored solution be referred to as the "active solution". During each iteration, a new candidate solution is generated
and compared to the active solution to determine if the new solution should replace the active solution. In order to
determine if the active solution is to be replaced, an acceptance criteria is defined. A new candidate solution that is
more fit than active solution (fitness being dictated by the objective function) is always accepted as the new active
solution. In an effort to encourage exploration, inferior candidate solutions have a probability of being accepted as
the active solution. The probability of accepting an inferior candidate solution is described by the function
$\exp(-\frac{J(x) - J(\bar{x})}{t_m})$ where $J(\cdot)$ is the objective functions described in [[#sec:objective-function]],
$t_m$ is current temperature, $x$ is the current solution, and $\bar{x}$ is the new candidate solution. The probability
of acceptance is a function of the current temperature and the difference of the active solution and a new candidate
solution. Formally, let $\Delta E \equiv J(x) - J(\bar{x})$ and let $f(\cdot)$ be the function that describes the probability of
accepting a candidate solution $\bar{x}$. The acceptance of a candidate solution is thus of the form shown in
[[eq:candaccept]] [cite:@keller-2019-multi-objec].

#+name: eq:candaccept
\begin{equation}
f(x,\bar{x},t_m) =
\begin{cases}
  1                   & \Delta E > 0 \\
  e^{- \frac{\Delta E}{t_m}} & \text{otherwise}
\end{cases}
\end{equation}

** Generation Mechanisms
:PROPERTIES:
:CUSTOM_ID: sec:generation-mechanisms
:END:
Generation mechanisms are used to create a neighboring candidate solution [cite:@gendreau-2018-handb-metah]. That is,
the generating function creates a solution that can be reached in a single iteration from the active solution. In the
case of the problem statement made in [[#sec:problem-description]], six primitive generation mechanism shall be used: new
visit, slide visit, new charger, new window, wait, and purge. The purpose of each of these generators is to assign new
visits to a charger, adjust a bus visits initial and final charge time within the same time frame/queue, move a BEB from
one charger to another with the same charge schedule, move a bus to its idle queue, and remove a charger from the set
of charger availability's. Each generator will be discussed in more detail in [[#sec:generators]].

These generation mechanisms will in turn be utilized by two wrapper functions. The schedule generation is to used create
an initial candidate solutions for SA to compare with other solutions, and the perturb schedule generator is used to
take a candidate solution and alter it slightly in an attempt to step toward a global or local minimum. The wrapper
functions will be discussed in [[#sec:generator-wrappers]]. However, prior to discussing the primitives and wrapper
generating functions, their respective inputs and outputs must be defined.

*** Generator Input/Output
:PROPERTIES:
:CUSTOM_ID: sec:generator-input-output
:END:
This section discusses in detail the expected inputs and outputs of each generator. It is important to discuss these
parameters to have an understanding of the generator algorithms to be derived. The input consists of the bus visit index
of interest, information about the current state of visits, $\I$, and the current state of the charger availability,
$\C$. The availability of each charger, $\C$, is iteratively constructed throughout the SA process. The output of each
generator affects the tuple (or a subset of the tuple) of decision variables $(q_i, u_i, d_i)$ and charger availability
$\C$.

In the development of the algorithms, dot notation is to be introduced to extract variables from tuples. For example,
suppose the arrival time is desired to be extracted from visit $i$. Given $\Sol$, the notation that describes extracting
the initial visit $u_i$ is written as $u_i \equiv \I_{i.u}$.

**** Generator Input
Each generator accepts an input of the tuple of the form $\Sol \equiv (i, \I, \C)$ where $i$ is the visit index being
manipulated, $\I$ is the tuple that describes the set of visits, and $\C$ is the set that describes the availability for
all chargers $q \in \Qset$. In other words, $\C$ defines the set of times when the chargers are not being utilized or are
"inactive".

To derive $\C$, consider its complement, $\C'$, which is the set of "active" time periods for each charger. Let $\C_q' \subset
\C'$ describes the active times for charger $q$. Focusing on an individual charger, consider $\C_q'$ before a schedule
has been imposed upon it, $\C_q' = \{ \varnothing \}$. In other words, no buses have been assigned to be charged over
some time period $[u_i, d_i]$. After the scheduling process is complete, $\C_q'$ will have a set of active periods of
the form $\C_q' = \{[u_i, d_i]: i \in I\}$. With a fully defined set $\C_q'$, its compliment can be found, $\C_q$.

Let $i^{\text{th}}$ inactive period be denoted as $\C_{i.q}$. To determine the inverse of $\C_q'$, begin by noting that
$\C_q'$ is said to be disjoint, $\C_q' \bigcap \{[u_j, d_j] : j \in \Jsetq\} = \varnothing$ (i.e. the sets share no common
elements) [cite:@halmos-1974-naive-set-theor]. The inverse of a disjoint set can be found by the De Morgan Law: $(A \cap
B)' = A' \cup B'$. Using De Morgan's Law, the set of inactive periods can be written as $\C_q \equiv \bigcup \{[u_j, d_j]': j \in
\Jsetq\}$.

**** Generator Output
The output of the generating functions is the same as the input, $\Sol$, but with changes applied to it by a generator.
Let a modified variable be denoted with a bar, $\bar{\cdot}$. Thus, the modified input tuple is written as $\bar{\Sol}$.
Although not all the variables in $\Sol$ are modified, it is written in this manner for the sake of consistency and
simplicity in bookkeeping. Steps within the notation are taken to clearly identify variables of interest.

*** Generators
:PROPERTIES:
:CUSTOM_ID: sec:generators
:END:
This section describes and outlines the algorithm pool for the different generator types that are utilized in the
wrapper functions. Recall that to satisfy constraints, $n_B$ extra idle queues are added that provide no power to the
BEB. Because of this, the set of queues is fully defined as $q \in \{1,..., n_B, n_B+1,..., n_Q+n_B\}$ where $n_Q$ is the
total amount of chargers and $n_B$ number of BEBs. The use case for the idle queues are for when a bus is not to be
placed on a charger. Rather, it will be placed in the queue, $q_i \in \{1,..., n_B\}$, which satisfies the previously
defined spatial constraints while allowing the bus to be "set aside".

**** New visit
:PROPERTIES:
:CUSTOM_ID: sec:new-visit
:END:
The new visit generator describes the process of moving a BEB, $b \in B$, from a waiting queue, $q_i \in B$, to a charging
queue, $q_i \in \{n_B+1,..., n_B + n_Q\}$, within its arrival/departure time $[a, e]$. Let $\U_{\{\cdot\}}$ indicate that an
element is selected randomly with a uniform distribution from the set $\{\cdot\}$. For example, $\U_{[a, e]}$ indicates that
a value will be selected between $a$ and $u$ with a uniform distribution. Lines 2 through 3 of \ref{alg:new-visit}
extract the arrival and departure times of visit $i$. Lines 4 and 5 select a charging queue, $q$, and time slice for
which $q$ is available at random with uniform distributions, respectively. Line 6 verifies that the inactive period
selected is viable and returns a random charging time, $[u, d]$. If the time frames of the visit and the charger
availability do not align, the null value is returned.

The function =findFreeTime= is the algorithm that determines whether a visit's time at the station $[a, e]$ can be placed
in the time availability of charger $q$. Let the available time for charger $q$ for visit $i$ be denoted as $C \equiv
\C_{i.q}$. The algorithm is defined in \ref{alg:find-free-time}. Let $C_L$ and $C_U$ be the lower and upper bound of the
time between active times for charger $q$. The set of cases in which the ranges $[a, e]$ and $[C_L, C_U]$ may interact
is shown in [[fig:find-free]]. In each case depicted by [[fig:find-free]], the red lines depict the arrival and departure time
for a BEB visit, $i$. The blue lines indicate regions in which charger $q$ is active. $C \in \C_q$ represents one of the
ranges between the blue lines, $[C_L, C_U]$. Note the symbol $\_$ is used to indicate variables that are either
unchanged or unused, for example in the case of return statements and variable extraction, respectively.

The =findFreeTime= algorithm is outlined in \ref{alg:find-free-time} and behaves as follows. Lines 2 and 3 extract the
lower and upper bounds of the charger availability. Lines 4 - 23 check whether the BEB visit can be assigned to the
charger available time slice. Lines 4 - 7 relate to the scenario in \ref{subfig:sandwich}. That is, the BEB visit fits
entirely within the charger availability and the charge time may be anywhere in the range $[a, e]$. Lines 8 - 11
coincides with \ref{subfig:all} where the BEB arrives before the charger is available. Therefore, the BEB may charge
anywhere in the time $[L, e]$. On the opposite end, Lines 12 - 15 represents the scenario in \ref{subfig:egu} in which
the BEB departs after the upper bound of the charger availability. Thus, the BEB may be charged anywhere in the time
frame of $[a, U]$. Lines 16 - 19 corresponds to the scenario in \ref{subfig:invertsandwhich} where the upper and lower
bound of the visit is constrained by the charger availability such that the time that the BEB can charge is between the
time slice $[L,U]$. Lines 20-24 relate to the scenarios in which the BEB visit does not fall within the charger
availability and assigns the null value to both $\bar{u}$ and $\bar{d}$. Lines 24-28 check if a time range has been
assigned. If one has, the time slice $[\bar{u}, \bar{d}]$ is assigned to the compliment of the charger availability.
Line 26 returns tuple of the updated charger availability and the initial and final charging times. Line 29 returns the
original charger availability and null values for the charge times upon failure.

#+include: eq/new-visit.org
#+include: img/find-free.org
#+include: eq/find-free.org

**** Purge
:PROPERTIES:
:CUSTOM_ID: sec:purge
:END:
The purge primitive generator simply removes a visit from a charger availability schedule, $\C$. This generator exists
so that other primitives may place the visit back into the schedule without creating duplicate entries in $\C$. Line 2
from \ref{alg:purge} updates $\C$ with the set of visits excluding visit $i$ from charging queue $q_i$. Line 3 returns
the updated set of charger availability.

#+include: eq/purge.org

**** Slide visit
:PROPERTIES:
:CUSTOM_ID: slide-visit
:END:
This primitive generator is used for buses that have already been scheduled. Because of the constraint \ref{seq:c8}
there may be some slack to manipulate $[u_i, d_i]$ within the window $[a_i, e_i]$. That is, two new values, $u_i$ and
$d_i$ are randomly selected with a uniform distribution that satisfy the constraint $a_i \leq u_i \leq d_i \leq e_i$. Line 2 from
\ref{alg:slide-visit} purges the visit from the charger availability schedule. Line 4 retrieves the window that was
opened up by purging visit $i$. Line 4 sets the new charge time frame, $[u_i, d_i]$. Line 5 returns the updated visit
information. If =findFreeTime= was unsuccessful, then the generator returns a tuple of null values.

#+include: eq/slide-visit.org

**** New charger
:PROPERTIES:
:CUSTOM_ID: new-charger
:END:
The new charger generator moves a visit $\I_i$ to a new charging queue while maintaining the same charge time, $[u_i,
d_i]$. Line 2 from \ref{alg:new-charger} purges the visit from the charger availability set. Line 3 randomly selects a
charger queue index, $q$. Line 4 checks if there is an available time slice $[a_i, e_i]$ for charger $q$. Line 5 returns
the updated visit data. If =findFreetime= was unsuccessful, then the generator returns a tuple of null values.

#+include: eq/new-charger.org

**** Wait
:PROPERTIES:
:CUSTOM_ID: sec:wait
:END:
The wait generator simply removes a bus from a charger queue and places it in its idle queue, \(q_i \in \{1,...,B\}\).
Line 2 from \ref{alg:wait} purges the visit from the charger availability set. Line 4 updates the complement charger
availability schedule of the wait queue for bus $b$. Line 5 returns the updated visit. Line 7 returns the null set upon
failure of assignment.

#+include: eq/wait.org

**** New Window
:PROPERTIES:
:CUSTOM_ID: sec:new-window
:END:
New window is a combination of \ref{alg:new-visit} (new visit) and \ref{alg:purge} (purge). By this it is meant that
visit $i$ is purged and added back in as if it were a new visit. This implies that the BEB may be assigned to a
different queue and a new charge time slice. Line 2 purges the BEB visit from the schedule producing $\bar{\Sol}$. Line
3 places the BEB back into the schedule using the new visit generator, producing $\bar{\bar{\Sol}}$. Line 4 assigns and
returns the updated visit. Line 6 returns the null visit upon failure of \ref{alg:new-visit}.

#+include: eq/new-window.org

*** Generator Wrappers
:PROPERTIES:
:CUSTOM_ID: sec:generator-wrappers
:END:
This section covers the algorithms utilized to select and execute different generation processes. The generator wrappers
are the methods immediately called by the SA algorithm. Each wrapper utilizes the primitive generators previously
described and returns either a new charge schedule or a modified charge schedule.

**** Charge Schedule Generation
:PROPERTIES:
:CUSTOM_ID: sec:charge-schedule-generation
:END:
The objective of this generator is to assign each BEB to its idle queue provided a schedule of routes. Specifically,
this generator exists to initialize the system with a solution that is spatiotemporally feasible, but does not satisfy
the battery dynamic constraints. This problem is addressed by the penalty method by allowing the infeasible battery SOCs
to occur, but penalizing the system for doing so. Line 2 of \ref{alg:charge-schedule-generation} loops through each
visit and Line 4 executes \ref{alg:wait}.

#+include: eq/charge-schedule-generation.org

**** Perturb Schedule
:PROPERTIES:
:CUSTOM_ID: sec:tweak-schedule
:END:
Once the active solution has been created by \ref{alg:charge-schedule-generation}, the SA process begins modifying it to
create candidate solutions. After each step of the cooling function, the active solution will be altered $n_k$ times by
a random primitive generator. During these $n_k$ iterations the active solution is modified to create a neighboring
candidate solution. This candidate solution will then be compared against the active solution in the manner discussed in
[[#sec:acceptance]]. This algorithm describes the method by which the SA algorithm decides how to perturb the schedule. The
method that will be employed generate a neighboring solution is as follows: pick a visit, pick a primitive generator,
and execute said primitive generator once. Thus, \ref{alg:perturb-schedule} is as follows: Line 2 selects a visit at
random with a uniform distribution. Line 3 extracts the visit index. Letting $n_G$ denote the number of primitive
generating functions, Line 4 selects a primitive generator. Line 5 executes the primitive, and Line 6 returns the
result.

#+include: eq/tweak-schedule.org

#  LocalWords:  metaheuristic linearities BEBs BEB
