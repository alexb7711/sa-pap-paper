* Simulated Annealing
:PROPERTIES:
:CUSTOM_ID: sec:sa-simulated-annealing
:END:

SA is a well-studied local search metaheuristic used to solve various optimization problems
[cite:@gendreau-2018-handb-metah;@press-1992-numer-recip]. The algorithm is often applied to problems that contain many
local solutions as it employs a stochastic approach that explores the solution space for an approximate global optimum.
This model is named after its analogized process where a crystalline solid is heated then allowed to cool at a slow rate
until it achieves its most regular possible crystal lattice configuration (i.e. lowest energy state)
[cite:@henderson-1989-theor-pract;@press-1992-numer-recip]. SA establishes a connection between the thermodynamic
process and the search for global optimum in optimization problems. Within the SA process there are three key
components: cooling equation, acceptance criteria, and generation mechanisms
[cite:@keller-2019-multi-objec;@press-1992-numer-recip].

The cooling equation describes the speed at which the figurative temperature is decreased in a controlled manner over
time. Throughout the SA process, many "candidate" solutions are generated and compared to an "active" solution. The
method by which the solutions are accepted is determined by the acceptance criteria. The acceptance criteria is a
function of the system temperature that makes the decision whether the system will accept an inferior solution in favor
of exploring the solution space. The means by which candidate solutions are generated is via the generation mechanisms.
These generators modify the solution by some singular discrete change [cite:@gendreau-2018-handb-metah]. Each of these
components are elaborated in the subsequent sections.

** Cooling Equation
:PROPERTIES:
:CUSTOM_ID: cooling-equation-experimental
:END:

The cooling equation models the rate at which the temperature decreases over time in the SA process. Initially, when the
temperature is high, SA encourages exploration. As the process begins to "cool down" (in accordance to the cooling
schedule), it begins to encourage local exploitation of the solution (rather than exploration)
[cite:@rutenbar-1989-simul-anneal-algor;@henderson-1989-theor-pract]. There are three common basic types of cooling
equations: linear, geometric, and exponential. Geometric cooling schedules are most widely used in practice
[cite:@keller-2019-multi-objec]. As such, it will also be employed by this work. It is defined by the difference
equation

#+name: eq:cool
  \begin{equation}
  t_m = \beta t_{m-1}\text{.}
  \end{equation}

In [[eq:cool]], $\beta$ controls the cooling rate. Typical values of $\beta$ are within the range $[0.8, 0.99]$
[cite:@henderson-1989-theor-pract]. \ref{fig:geometric} demonstrates this principle by plotting the geometric schedule
using varying values of $\beta$. The variable $t_m$ represents the temperature at the $m^{\text{th}}$ step of the
temperature function. The total amount of steps, $M$, is dictated by the initial temperature and $\beta$.

#+begin_src latex
  \begin{figure}[t!]
    \centering \includegraphics[width=0.6\textwidth]{img/geometric.png}
    \caption{Geometric cooling schedule utilizing various value of $\beta$.}
    \label{fig:geometric}
  \end{figure}
#+end_src

** Acceptance Criteria
:PROPERTIES:
:CUSTOM_ID: sec:sa-acceptance
:END:
In SA, the algorithm stores a solution that is continuously compared to newly generated solutions. Let the stored
solution be referred to as the "active solution". During each iteration, a new "candidate" solution is generated and
compared to the active solution to determine if the candidate solution should replace the active solution. The method of
determining whether the active solution should be replaced is defined by an acceptance criteria. In an effort to
encourage exploration, inferior candidate solutions have a probability of being accepted. The probability of accepting
an inferior candidate solution is determined by the objective functions of the active and candidate solutions, $J(\I)$
and $J(\bar{\I})$, respectively, and the current temperature, $t_m$. Let $\Delta E \equiv J(\I) - J(\bar{\I})$ and let $f(\cdot)$ be
the function that describes the probability of accepting a candidate solution $\bar{\I}$. The probability of accepting a
candidate solution is thus of the form [cite:@keller-2019-multi-objec]

#+name: eq:candaccept
\begin{equation}
f(\I,\bar{\I},t_m) =
\begin{cases}
  1                   & \Delta E > 0 \\
  e^{- \frac{\Delta E}{t_m}} & \text{otherwise}
\end{cases}\text{.}
\end{equation}

** Neighbor Generators and Wrappers
:PROPERTIES:
:CUSTOM_ID: sec:sa-generation-mechanisms
:END:
Generation mechanisms are used to create a neighboring candidate solution [cite:@gendreau-2018-handb-metah]. That is,
the generating function creates a solution that can be reached in a single iteration from the active solution. In
response to the problem statement made in [[#sec:sa-problem-description]], five primitive generation mechanism are used: new
visit, slide visit, new charger, wait, and new window. The purpose of each of these generators is to assign new visits
to a charger, adjust a bus visits initial and final charge time within the same time frame/queue, move a BEB from one
charger to another with the same charge schedule, move a bus to its idle queue. Each generator will be discussed in more
detail in [[#sec:sa-generators]].

These primitive generation mechanisms will, in turn, be utilized by two wrapper functions. The charge schedule generator
is to used create an initial candidate solutions for SA and the perturb schedule generator is used to take a candidate
solution and alter it slightly in an attempt to step toward a global or local minimum. The wrapper functions will be
discussed in [[#sec:sa-generator-wrappers]]. However, prior to discussing the primitives and wrapper generating functions,
their respective inputs and outputs must be defined.

*** Generator Input/Output
:PROPERTIES:
:CUSTOM_ID: sec:sa-generator-input-output
:END:

Each generator primitive accepts a tuple $\Sol \equiv (i, \I, \C)$ where $i$ is the visit index being manipulated, $\I$ is
the set of visits, and $\C$ is the set that describes the availability for all chargers $q \in \Qset$. The output of the
generating functions is the same as the input, but with changes applied to it by a generator. Let a modified variable be
denoted with a bar, $\bar{\cdot}$. Thus, the modified input tuple is written as $\bar{\Sol}$.

*** Generators
:PROPERTIES:
:CUSTOM_ID: sec:sa-generators
:END:

The mechanism by which candidate solutions are generated is introduced in the subsequent sections. Recall that to
satisfy constraints, $n_B$ extra idle queues are added that provide no power to the BEB. Because of this, the set of
queues is fully defined where $Q$ is the ordered set of idle queues, slow queues, then fast queue. The use case for the
idle queues are for when a bus is not to be placed on a charger. Rather, it will be placed in the queue, $q \in B$, which
satisfies the previously defined spatial constraints while allowing the bus to be "set aside". The charge queues are
denoted by $q \in \{1, ..., n_B , n_B + 1, ..., n_Q\}$.

For the sake of ease in referring to the various variables associated with a visit, dot notation is used. For example,
suppose the arrival time is desired to be extracted from visit $i$. Given $\I$, the notation that describes extracting
the initial charge time for visit $i$ is written as $u_i \equiv \I_{i.u}$.

**** New visit
:PROPERTIES:
:CUSTOM_ID: sec:sa-new-visit
:END:
The new visit generator defined in \ref{alg:new-visit} describes the process of moving a BEB, $b \in B$, from a waiting
queue, $q \in B$, to a charging queue, $q_i \in \{n_B + 1, ..., n_Q\}$, within its arrival/departure time $[a_i, e_i]$. Let
$\U_{\{\cdot\}}$ indicate that an element is selected randomly with a uniform distribution from the set $\{\cdot\}$. For
example, $\U_{[a_i, e_i]}$ indicates that a value will be selected between $a$ and $e$ with a uniform distribution.
\ref{alg:new-visit} begins by extracting variables. Lines 8 and 9 randomly select a charging queue and available time
frame with a uniform distribution, respectively. Line 10 attempts to assign the visit to the previously select time
slice, if it succeeds, the updated visit is returned. Otherwise, the null value is returned.

The function =FindFreeTime= is the algorithm that determines whether a visit's time at the station $[a_i, e_i]$ can be placed
in the time availability of charger $q$. Let the available time for charger $q$ for visit $i$ be denoted as $C \equiv
\C_{i.q}$. Furthermore, let the lower and upper bound of $\C$ be denoted as $C_L$ and $C_U$, respectively. The algorithm
checks whether the BEB time at the station, $[a_i, e_i]$ fits within the charger availability $[C_L, C_U]$. If it does,
a random charging time frame is returned such that $a_i \le u_i \le d_i \le e_i$. Otherwise the null value is returned.

#+include: eq/new-visit.org

**** Purge :noexport:
:PROPERTIES:
:CUSTOM_ID: sec:sa-purge
:END:
The purge procedure simply removes an assigned charge time from the set $\C$. This function, while not a generator,
exists so that other primitives may place the visit back into the schedule without creating duplicate entries in $\C$.
Line 2 from \ref{alg:purge} updates $\C$ with the set of visits excluding visit $i$ from charging queue $q_i$. Line 3
returns the updated set of charger availability.

#+include: eq/purge.org

**** Slide visit
:PROPERTIES:
:CUSTOM_ID: slide-visit
:END:
This primitive generator is used for visits that have already been scheduled. Because of the constraint \ref{seq:c8},
there may be some slack to manipulate $[u_i, d_i]$ within the window $[a_i, e_i]$. That is, two new values, $u_i$ and
$d_i$ are randomly selected with a uniform distribution that satisfy the constraint $a_i \leq u_i \leq d_i \leq e_i$.
\ref{alg:slide-visit} begins be extracting variables. Line 5 purges the visit from the charger availability schedule.
The =Purge= function simply removes an assigned charge time from the set $\C$. Without altering selected queue, the charge
time randomly re-assigned with a uniform distribution. Upon success, the updated tuple is returned, otherwise the null
value is returned.

#+include: eq/slide-visit.org

**** New charger
:PROPERTIES:
:CUSTOM_ID: new-charger
:END:
The new charger generator moves a visit $\I_i$ to a new charging queue while maintaining the same charge time, $[u_i,
d_i]$. \ref{alg:new-charger} begins be extracting variables, and then purges the visit from the charger availability
set, a queue is selected at random with a uniform distribution, then the new selection is checked whether the charge
time $[u_i, d_i]$ may be assigned to the new queue.

#+include: eq/new-charger.org

**** Wait
:PROPERTIES:
:CUSTOM_ID: sec:sa-wait
:END:
The wait generator simply removes a bus from a charger queue and places it in its idle queue, $q_i \in B$. \ref{alg:wait}
begins by purging the visit from the charger availability set, the visit is then assigned to its idle queue for the
duration of its time at the station.

#+include: eq/wait.org

**** New Window
:PROPERTIES:
:CUSTOM_ID: sec:sa-new-window
:END:

New window, as shown in \ref{alg:new-window}, is a combination of \ref{alg:new-visit} (new visit) and \ref{alg:wait}
(wait). By this it is meant that visit $i$ is placed in its wait queue then added back in as if it were a new visit.
This implies that the BEB may be assigned to a different queue with a new charging time frame. Upon success, the
algorithm returns the updated tuple, otherwise return the null value.

#+include: eq/new-window.org

*** Generator Wrappers
:PROPERTIES:
:CUSTOM_ID: sec:sa-generator-wrappers
:END:

The generator wrappers provide the highest level of abstraction from which the SA algorithm directly interacts. These
wrapper functions utilize the primitive generators previously described to either create a new charge schedule to
initialize the SA algorithm, or to modify an existing schedule.

**** Charge Schedule Generation
:PROPERTIES:
:CUSTOM_ID: sec:sa-charge-schedule-generation
:END:

The objective of \ref{alg:charge-schedule-generation} is to introduce a method that provides the SA algorithm with an
initial charging schedule. The schedule generation is chosen to initialize the algorithm in a greedy manner by looping
through each visit and executing \ref{alg:new-visit} to place visit $i$ at random queue with a random charge time.

#+begin_comment
Line 2 of
\ref{alg:charge-schedule-generation} loops through each visit and Line 4 executes \ref{alg:new-visit} to place visit $i$
at random queue with a random charge time.
#+end_comment

#+include: eq/charge-schedule-generation.org

**** Perturb Schedule
:PROPERTIES:
:CUSTOM_ID: sec:sa-tweak-schedule
:END:

\ref{alg:perturb-schedule} describes the method by which the SA algorithm decides how to perturb a given charge
schedule. The method that will be employed to generate neighboring solutions is as follows: pick a visit, pick a
primitive generator, and execute said primitive generator once. Let $\W^y_{[\cdot]}$ denote a random selection with a
distribution specified by a weight vector $y \in \mathbb{R}$. Thus, \ref{alg:perturb-schedule} is as follows: Lines 2-12 generate a
vector of weights for the visit index selection. The weights have a default value of one. Each visit is then indexed in
reverse order. If the SOC of the visit is less than $\nu_b \kappa_b$, then the weight for the visit is calculated as shown on
Line 10. The route for BEB $b$ is then set as a "priority" on Line 9 to propagate the previously calculated weight to
earlier visits of BEB $b$ as shown on Line 5. This is done in an attempt to encourage the SA algorithm to "fix" the
current or previous visits so that the SOC stays above the minimum threshold. The algorithm then selects a visit index
with weighted distribution $y^v$ and selects a primitive with a weighted distribution, $y^p$. Letting $n_G$ denote the
number of primitive generating functions, line 15 selects a primitive generating function with a weighted distribution,
$\W^{y^v}_{[1, n_G]}$. The primitive is then executed, and the results are returned.

#+include: eq/tweak-schedule.org

** Alternative Heuristic Implementation
:PROPERTIES:
:CUSTOM_ID: sec:sa-heuristic-implementation
:END:

As suggested by the works in [cite:@Zhang_2010; @Xinchao_2011], applying heuristics to the generating functions can
manipulate the searched neighborhoods in a way that may assist the SA algorithm with convergence. As a test to assist in
minimizing charger utilization, a simple heuristic is applied to \ref{alg:new-visit} and \ref{alg:new-charger} in the
method that they select new charging queues. Rather than selecting a queue at random from $q \in Q$, the algorithms
randomly select whether to place a BEB in a slow or fast charging queue with a weighted distribution favoring slow
chargers. Once the charger type has been selected, the algorithm will then begin incrementally attempting to place the
BEB in a queue of that type beginning from the smallest index of that charger type. For example, if a BEB has been
selected to be placed in a queue with a slow charger, the algorithm begins by attempting to place the BEB in the charger
queue $q = n_B + 1$. If it is unable to be placed in that queue, it then attempts to be placed in the next queue $q =
n_B + 2$. This is done incrementally until all the queues have been exhausted. The objective of this alternative
approach is to explore whether the added up-front computation cost by including the heuristic will positively influence
the output of the results and to what degree.

#  LocalWords: metaheuristic linearities BEBs BEB
