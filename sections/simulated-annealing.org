* Simulated Annealing
:PROPERTIES:
:CUSTOM_ID: sec:simulated-annealing
:END:
SA is a well-studied local search metaheuristic used to solve various optimization problems
[cite:@gendreau-2018-handb-metah;@press-1992-numer-recip]. A metaheuristic is a high-level problem-independent algorithm
framework that provides a set of guidelines or strategies to develop heuristic optimization algorithms
[cite:@radosavljevic-2018-metah-optim]. That is, metaheuristic strategies provides guidelines for implementation;
however, each problem must tailor its implementation to meet its particular needs.

SA is an exploitation oriented, single-solution based metaheuristic. In addition to the advantages of simplicity, both
theoretically and in its implementation [cite:@gendreau-2018-handb-metah;@radosavljevic-2018-metah-optim]. SA is also of
considerable interest for global optimization over regions containing several local and global minima due to inherent
non-linearities of the objective function [cite:@gendreau-2018-handb-metah]. This model is named after its analogized
process where a crystalline solid is heated then allowed to cool at a slow rate until it achieves its most regular
possible crystal lattice configuration (i.e. its minimum lattice energy state)
[cite:@henderson-1989-theor-pract;@press-1992-numer-recip]. SA establishes a connection between this thermodynamic
process and the search for global optima in optimization problems.

There are three key components to SA: cooling schedule (temperature function), acceptance criteria, and generation
mechanisms [cite:@keller-2019-multi-objec;@press-1992-numer-recip]. The temperature function describes the speed at
which the system is "cooled" over each iteration. The term "system" refers to a general instance of SA. The generation
mechanisms provide a means of modifying the system by some singular discrete change that is within the neighborhood of
the previous solution [cite:@gendreau-2018-handb-metah]. The acceptance criteria is a function of the system temperature
that makes the decision whether the system will accept an inferior solution in favor of exploring the solution space.
Finally, the constant temperature iteration count is the number of steps taken to try to exploit a solution at a
constant temperature. Each of these mechanisms are elaborated in the subsequent sections.

** Cooling Equation
:PROPERTIES:
:CUSTOM_ID: cooling-equation-experimental
:END:
The temperature function models a "rate of cooling" for the SA process. Initially, when the temperature is high, SA
encourages exploration. As the process begins to "cools down" (in accordance to the cooling schedule), it begins to
encourage local exploitation of the solution (rather than exploration)
[cite:@rutenbar-1989-simul-anneal-algor;@henderson-1989-theor-pract]. There are three common basic types of cooling
equations: linear, geometric, and exponential. Geometric cooling schedules are most widely used in practice
[cite:@keller-2019-multi-objec]. As such, it will also be employed by this work. It is defined by the difference
equation

#+name: eq:cool
  \begin{equation}
  t_m = \beta t_{m-1}\text{.}
  \end{equation}

The value of $\beta$ may vary anywhere between the range $[0,1)$. The further $\beta$ is from 1, the quicker the function
converges to zero. \ref{fig:geometric} demonstrates this principle by plotting the geometric schedule using varying
values of $\beta$.

#+begin_src latex
  \begin{figure}[t!]
    \centering \includegraphics[width=0.6\textwidth]{img/geometric.png}
    \caption{Geometric cooling schedule utilizing various value of $\beta$.}
    \label{fig:geometric}
  \end{figure}
#+end_src

** Acceptance Criteria
:PROPERTIES:
:CUSTOM_ID: sec:acceptance
:END:
In SA, the algorithm stores a candidate solution that is continuously compared to newly generated solutions. Let the
stored solution be referred to as the "active solution". During each iteration, a new candidate solution is generated
and compared to the active solution to determine if the new solution should replace the active solution. To determine if
the active solution is to be replaced, an acceptance criterion is defined. In an effort to encourage exploration,
inferior candidate solutions have a probability of being accepted. The probability of accepting an inferior candidate
solution is described by the function $\exp(-\frac{J(\I) - J(\bar{\I})}{t_m})$ where $J(\cdot)$ is the objective function
([[#sec:objective-function]]), $t_m$ is current temperature, $\I$ is the current solution, and $\bar{\I}$ is the new
candidate solution. Formally, let $\Delta E \equiv J(\I) - J(\bar{\I})$ and let $f(\cdot)$ be the function that describes the
probability of accepting a candidate solution $\bar{\I}$. The probability of accepting a candidate solution is thus of
the form [cite:@keller-2019-multi-objec]

#+name: eq:candaccept
\begin{equation}
f(\I,\bar{\I},t_m) =
\begin{cases}
  1                   & \Delta E > 0 \\
  e^{- \frac{\Delta E}{t_m}} & \text{otherwise}
\end{cases}\text{.}
\end{equation}

** Neighbor Generators and Wrappers
:PROPERTIES:
:CUSTOM_ID: sec:generation-mechanisms
:END:
Generation mechanisms are used to create a neighboring candidate solution [cite:@gendreau-2018-handb-metah]. That is,
the generating function creates a solution that can be reached in a single iteration from the active solution. In the
case of the problem statement made in [[#sec:problem-description]], five primitive generation mechanism are used: new visit,
slide visit, new charger, new window, wait. The purpose of each of these generators is to assign new visits to a
charger, adjust a bus visits initial and final charge time within the same time frame/queue, move a BEB from one charger
to another with the same charge schedule, move a bus to its idle queue. Each generator will be discussed in more detail
in [[#sec:generators]].

These generation mechanisms will in turn be utilized by two wrapper functions. The schedule generation is to used create
an initial candidate solutions for SA and the perturb schedule generator is used to take a candidate solution and alter
it slightly in an attempt to step toward a global or local minimum. The wrapper functions will be discussed in
[[#sec:generator-wrappers]]. However, prior to discussing the primitives and wrapper generating functions, their respective
inputs and outputs must be defined.

*** Generator Input/Output
:PROPERTIES:
:CUSTOM_ID: sec:generator-input-output
:END:
This section discusses inputs and outputs of each generator. The input consists of the bus visit index of interest, the
current state of visits, $\I$, and the current state of the charger availability, $\C$. The output of each generator
affects a subset of $\I$ and the updated charger availability $\C$.

**** Generator Input
Each generator accepts a tuple $\Sol \equiv (i, \I, \C)$ where $i$ is the visit index being manipulated, $\I$ is the set of
visits, and $\C$ is the set that describes the availability for all chargers $q \in \Qset$.

**** Generator Output
The output of the generating functions is the same as the input, but with changes applied to it by a generator. Let a
modified variable be denoted with a bar, $\bar{\cdot}$. Thus, the modified input tuple is written as $\bar{\Sol}$. Although
not all the variables in $\Sol$ are modified, it is written in this manner for the sake of consistency and simplicity in
bookkeeping.

*** Generators
:PROPERTIES:
:CUSTOM_ID: sec:generators
:END:
This section describes and outlines the different generator types. Recall that to satisfy constraints, $n_B$ extra idle
queues are added that provide no power to the BEB. Because of this, the set of queues is fully defined where $Q$ is the
ordered set of idle queues, slow queues, then fast queue. The use case for the idle queues are for when a bus is not to
be placed on a charger. Rather, it will be placed in the queue, $q \in B$, which satisfies the previously defined spatial
constraints while allowing the bus to be "set aside". The charge queues are denoted by $q \in Q \setminus B$.

In the development of the algorithms, the dot notation is to be introduced to extract variables from tuples. For
example, suppose the arrival time is desired to be extracted from visit $i$. Given $\I$, the notation that describes
extracting the initial charge time for visit $i$ is written as $u_i \equiv \I_{i.u}$.

**** New visit
:PROPERTIES:
:CUSTOM_ID: sec:new-visit
:END:
The new visit generator defined in \ref{alg:new-visit} describes the process of moving a BEB, $b \in B$, from a waiting
queue, $q \in B$, to a charging queue, $q_i \in Q \setminus B$, within its arrival/departure time $[a, e]$. Let $\U_{\{\cdot\}}$
indicate that an element is selected randomly with a uniform distribution from the set $\{\cdot\}$. For example, $\U_{[a,
e]}$ indicates that a value will be selected between $a$ and $e$ with a uniform distribution. \ref{alg:new-visit} begins
by extracting variables. Lines 6 and 7 randomly select a charging queue and available time frame with a uniform
distribution, respectively. Line 8 attempts to assign the visit the time frame found in Line 7, if it succeeds, the
updated visit is returned. Otherwise, the null value is returned.

#+begin_comment
Line 2 extracts the index of the visit. Lines 3 through 4 of extract the arrival and departure times of visit $i$. Line
5 retrieves the currently assigned charge queue. Lines 6 and 7 select a charging queue, $q$, and time slice for which
$q$ is available at random with uniform distributions, respectively. Line 8 verifies that the inactive period selected
is viable and returns a random charging time, $[u, d]$. If the time frames of the visit and the charger availability do
not align, the null value is returned.
#+end_comment

The function =findFreeTime= is the algorithm that determines whether a visit's time at the station $[a, e]$ can be placed
in the time availability of charger $q$. Let the available time for charger $q$ for visit $i$ be denoted as $C \equiv
\C_{i.q}$. Furthermore, let the lower and upper bound of $\C$ be denoted as $\C_L$ and $C_U$, respectively. The
algorithm checks whether the BEB time at the station, $[a_i, e_i]$ fits within the charger availability $[C_L, C_U]$. If
it does, a random charge time slice is returned, otherwise the null value is returned.

#+begin_comment
The function =findFreeTime= is the algorithm that determines whether a visit's time at the station $[a, e]$ can be placed
in the time availability of charger $q$. Let the available time for charger $q$ for visit $i$ be denoted as $C \equiv
\C_{i.q}$. The algorithm is defined in \ref{alg:find-free-time}. Let $C_L$ and $C_U$ be the lower and upper bound of the
time between active times for charger $q$. The set of cases in which the ranges $[a, e]$ and $[C_L, C_U]$ may interact
is shown in [[fig:find-free]]. In each case depicted by [[fig:find-free]], the red lines depict the arrival and departure time
for a BEB visit, $i$. The blue lines indicate regions in which charger $q$ is active. $C \in \C_q$ represents one of the
ranges between the blue lines, $[C_L, C_U]$.

The =findFreeTime= algorithm is outlined in \ref{alg:find-free-time} and behaves as follows. Lines 2 and 3 extract the
lower and upper bounds of the charger availability. Lines 4 - 23 check whether the BEB visit can be assigned to the
charger available time slice. Lines 4 - 7 relate to the scenario in \ref{subfig:sandwich}. That is, the BEB visit fits
entirely within the charger availability and the charge time may be anywhere in the range $[a, e]$. Lines 8 - 11
coincides with \ref{subfig:all} where the BEB arrives before the charger is available. Therefore, the BEB may charge
anywhere in the time $[L, e]$. On the opposite end, Lines 12 - 15 represents the scenario in \ref{subfig:egu} in which
the BEB departs after the upper bound of the charger availability. Thus, the BEB may be charged anywhere in the time
frame of $[a, U]$. Lines 16 - 19 corresponds to the scenario in \ref{subfig:invertsandwhich} where the upper and lower
bound of the visit is constrained by the charger availability such that the time that the BEB can charge is between the
time slice $[L,U]$. Lines 20-24 relate to the scenarios in which the BEB visit does not fall within the charger
availability and assigns the null value to both $\bar{u}$ and $\bar{d}$. Lines 24-28 check if a time range has been
assigned. If one has, the time slice $[\bar{u}, \bar{d}]$ is assigned to the compliment of the charger availability.
Line 26 returns tuple of the updated charger availability and the initial and final charging times. Line 29 returns the
original charger availability and null values for the charge times upon failure.
#+end_comment

#+include: eq/new-visit.org
# +include: ../img/find-free.org
# +include: eq/find-free.org

**** Purge :noexport:
:PROPERTIES:
:CUSTOM_ID: sec:purge
:END:
The purge procedure simply removes an assigned charge time from the set $\C$. This function, while not a generator,
exists so that other primitives may place the visit back into the schedule without creating duplicate entries in $\C$.
Line 2 from \ref{alg:purge} updates $\C$ with the set of visits excluding visit $i$ from charging queue $q_i$. Line 3
returns the updated set of charger availability.

#+include: eq/purge.org

**** Slide visit
:PROPERTIES:
:CUSTOM_ID: slide-visit
:END:
This primitive generator is used for visits that have already been scheduled. Because of the constraint \ref{seq:c8}
there may be some slack to manipulate $[u_i, d_i]$ within the window $[a_i, e_i]$. That is, two new values, $u_i$ and
$d_i$ are randomly selected with a uniform distribution that satisfy the constraint $a_i \leq u_i \leq d_i \leq e_i$. Line 2 of
\ref{alg:slide-visit} purges the visit from the charger availability schedule. The =Purge= function simply removes an
assigned charge time from the set $\C$. Without altering selected queue, the charge time randomly re-assigned with a
uniform distribution. Upon success, the updated tuple is returned, otherwise the null value is returned.

#+begin_comment
Line 2 from
\ref{alg:slide-visit} purges the visit from the charger availability schedule. Line 4 retrieves the window that was
opened up by purging visit $i$. Line 4 sets the new charge time frame, $[u_i, d_i]$. Line 5 returns the updated visit
information. If =findFreeTime= was unsuccessful, then the generator returns a tuple of null values.
#+end_comment

#+include: eq/slide-visit.org

**** New charger
:PROPERTIES:
:CUSTOM_ID: new-charger
:END:
The new charger generator moves a visit $\I_i$ to a new charging queue while maintaining the same charge time, $[u_i,
d_i]$. \ref{alg:new-charger} initial purges the visit from the charger availability set, a queue is selected at random
with a uniform distribution, then the new selection is checked whether the charge time $[u_i, d_i]$ may be assigned to
the new queue.

#+begin_comment
Line 2 from \ref{alg:new-charger} purges the visit from the charger availability set. Line 3 randomly selects a
charger queue index, $q$. Line 4 checks if there is an available time slice $[a_i, e_i]$ for charger $q$. Line 5 returns
the updated visit data. If =findFreetime= was unsuccessful, then the generator returns a tuple of null values.
#+end_comment

#+include: eq/new-charger.org

**** Wait
:PROPERTIES:
:CUSTOM_ID: sec:wait
:END:
The wait generator simply removes a bus from a charger queue and places it in its idle queue, $q_i \in B$. \ref{alg:wait}
begins by purging the visit from the charger availability set, the visit is then assigned to its idle queue for the
duration of its time at the station.

#+begin_comment
Line 2 from \ref{alg:wait} purges the visit from the charger availability set. Line 4 updates the complement charger
availability schedule of the wait queue for bus $b$. Line 5 returns the updated visit.
#+end_comment

#+include: eq/wait.org

**** New Window
:PROPERTIES:
:CUSTOM_ID: sec:new-window
:END:
New window, as shown in \ref{alg:new-window}, is a combination of \ref{alg:new-visit} (new visit) and \ref{alg:wait}
(wait). By this it is meant that visit $i$ is placed in its wait queue then added back in as if it were a new visit.
This implies that the BEB may be assigned to a different queue and a new charge time slice. \ref{alg:new-window} begins
by purging the visit from the charger availability set. \ref{alg:wait} is executed, upon success, \ref{alg:new-visit} is
executed. If that succeeds, return the updated tuple, otherwise return the null value.

#+begin_comment
Line 2 purges the BEB visit
from the schedule producing $\bar{\Sol}$. Line 3 places the BEB back into the schedule using the new visit generator,
producing $\bar{\bar{\Sol}}$. Line 4 assigns and returns the updated visit. Line 6 returns the null visit upon failure
of \ref{alg:new-visit}.
#+end_comment

#+include: eq/new-window.org

*** Generator Wrappers
:PROPERTIES:
:CUSTOM_ID: sec:generator-wrappers
:END:
This section covers the algorithms utilized to select and execute different generation processes. The generator wrappers
are the methods immediately called by the SA algorithm. Each wrapper utilizes the primitive generators previously
described and returns either a new charge schedule or a modified charge schedule.

**** Charge Schedule Generation
:PROPERTIES:
:CUSTOM_ID: sec:charge-schedule-generation
:END:
The objective of \ref{alg:charge-schedule-generation} is to assign each visit to a random charge queue and charge time.
Specifically, this generator exists to initialize the system with a solution in a greedy manner.
\ref{alg:charge-schedule-generation} loops through each visit and executes \ref{alg:new-visit} to place visit $i$ at
random queue with a random charge time.

#+begin_comment
Line 2 of
\ref{alg:charge-schedule-generation} loops through each visit and Line 4 executes \ref{alg:new-visit} to place visit $i$
at random queue with a random charge time.
#+end_comment

#+include: eq/charge-schedule-generation.org

**** Perturb Schedule
:PROPERTIES:
:CUSTOM_ID: sec:tweak-schedule
:END:

Once the active solution has been created by \ref{alg:charge-schedule-generation}, the SA process begins modifying it to
create candidate solutions. After each step of the cooling function, the active solution will be altered $n_K$ times by
a random primitive generator. During these $n_K$ iterations the active solution is modified to create a neighboring
candidate solution. This candidate solution will then be compared against the active solution in the manner discussed in
[[#sec:acceptance]]. \ref{alg:perturb-schedule} describes the method by which the SA algorithm decides how to perturb the
schedule. The method that will be employed generate a neighboring solution is as follows: pick a visit, pick a primitive
generator, and execute said primitive generator once. Let $\W^y_{[\cdot]}$ denote a random selection with a distribution
specified by a weight vector $y \in \mathbb{R}$. Thus, \ref{alg:perturb-schedule} is as follows: select a visit with a uniform
distribution, select a primitive with a weighted distribution. Letting $n_G$ denote the number of primitive generating
functions, the selected primitive with a weighted distribution is denoted as $\W^y_{[1, n_G]}$. The primitive is then
executed, and the results are returned.

#+begin_comment
 Line 2 selects
a visit at random with a uniform distribution. Line 3 extracts the visit index and Line 4 creates a vector of weights
associated with a primitive generator. Letting $n_G$ denote the number of primitive generating functions, Line 5 selects
a primitive generator with a weighted distribution. Line 6 executes the primitive, and Line 7 returns the result.
#+end_comment

#+include: eq/tweak-schedule.org

** Alternative Heuristic Implementation
:PROPERTIES:
:CUSTOM_ID: sec:heuristic-implementation
:END:

As suggested by the works in [cite:@Zhang_2010; @Xinchao_2011], applying heuristics to the generating functions can
manipulate the searched neighborhoods in a way that may assist the SA algorithm with convergence. As a test to assist in
minimizing charger utilization, a simple heuristic was applied to \ref{alg:new-visit} and \ref{alg:new-charger} in the
method that they select new charging queues. Suppose rather than selecting a queue at random from $q \in Q$, the
algorithms randomly select whether to place a BEB in a slow or fast charging queue with a weighted distribution favoring
slow chargers. Once the charger type has been selected, the algorithm will then begin incrementally attempting to place
the BEB in a queue of that type beginning from the smallest index of that charger type. For example, if a BEB has been
selected to be placed in a queue with a slow charger, the algorithm begins by attempting to place the BEB in the charger
queue $q = n_B + 1$. If it is unable to be placed in that queue, it then attempts to be placed in the next queue $q =
n_B + 2$. This is done incrementally until all the queues have been exhausted. That is, at the expense of an additional
up-front computation cost, the heuristic will attempt to pack the visit optimally in the spacial sense.

#  LocalWords:  metaheuristic linearities BEBs BEB
